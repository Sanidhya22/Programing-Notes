                                     Solid Principles
                                    -----------------

   What do you mean by Solid Principles ?
-> Solid Principles are the principles in object-oriented programming intended to make software designs more 
   understandable, flexible, and maintainable. 

   There are Main 5 Solid Principles

   1. Single Responsibility Principle 
   2. Open and Closed Principle
   3. Liskov Substitution Principle
   4. Interface Segregation Principle
   5. Dependency Inversion Principle


   1. Single Responsibility Principle - 
      Java
      ---------------------
      Each class should have one responsibility, one single purpose.
      JavaScript
      ----------------------
      A class or module should have only one reason to change. In JavaScript, this principle is typically applied
      to functions, classes, or modules.

   2. Open and Closed Principle - 
      Java
      ----------------------
      class should be open for extension but closed for modification.
      JavaScript
      ----------------------
      Classes or Modules should be open for extension but closed for modification. This means that you should be 
      able to extend the behavior of a class without modifying its source code.

   3. Liskov Substitution Principle - 
      Java / JavaScript
      ----------------------
      Any subclass object should be replaceable for the superclass object from which it is derived without 
      affecting the correctness of the program. In simpler terms, it means that a subclass should behave in such 
      a way that it does not break the functionality that the superclass promises.
      
   4. Interface Segregation Principle - 
      Java / JavaScript
      -----------------------
      We should break larger interfaces into smaller ones.  
      It suggests that interfaces should be specific to the needs of the clients to prevent them from being burdened with
      unnecessary methods.

   5. Dependency Interversion Principle - 
      Java / JavaScript
      -----------------------
      High level modules should not depend on low level modules, both should depend on Abstractions.   

      High-level modules (such as business logic or application components) should not directly depend on 
      low-level modules (such as specific implementations of data access or external services).

      Both high-level and low-level modules should depend on abstractions (interfaces or abstract classes) 
      instead of concrete implementations.

   What are the negatives to using SOLID ?
-> The disadvantages of Solid Principles are as follows - 

   1. Increased Development Time: Implementing SOLID principles often requires more upfront design and planning, 
      which can increase development time.    
   2. Complexity: Applying SOLID principles can sometimes result in overly complex code structures, especially 
      if not implemented thoughtfully. 
   3. Resistance to Change: Introducing SOLID principles to an existing codebase or team culture may face 
      resistance from developers who are aware to different coding practices.
   4. Performance Overhead: Introducing SOLID principles to application may cause a performance overhead. 

   What are the advantages of Solid Principles ?
-> The advantages of Design Principles are as follows -

   1. Scalability: By following design principles, you can create scalable solutions that are flexible and 
      adaptable to changing requirements and environments. 
   2. Maintainability: Design principles focues on writing clean, modular, and well-organized code, making it 
      easier to understand, debug, and maintain.   
   3. Reuse: Design principles encourage the reuse of code and design patterns, allowing developers to leverage 
      existing solutions and components instead of writing again same solutions.    
   4. Quality: Design principles contribute to the overall quality of a solution. High-quality design leads to 
      higher customer satisfaction and better business outcomes.     
 
   Explain DRY, KISS and YAGNI ?   
-> DRY (Don't Repeat Yourself): -
   ---------------------------------------
   1. DRY is a principle aimed at reducing repetition of code within a software application. 

   2. When you find yourself repeating the same code or logic in multiple places, it's a sign that you might 
      need to refactor your code to avoid duplication. Duplication can lead to maintenance issues, such as 
      inconsistencies and bugs, and makes it harder to update or extend the system. 
  
   KISS (Keep It Simple, Stupid): -  
   ----------------------------------------  
   1. KISS is a design principle that aims at keeping code simple and clear in software application. 

   2. Complex solutions can be harder to understand, debug, and maintain. They also increase the likelihood of 
      introducing bugs and performance issues. By keeping things simple, developers can reduce the risk of 
      errors and improve the overall quality of the software.  

   YAGNI (You Aren't Gonna Need It): -
   -----------------------------------------
   1. YAGNI is a principle that tells developers not to add unnecessary functionality to a system until it is 
      actually needed.
   2. Adding unnecessary features or functionality prematurely can lead to bad code, increased complexity, 
      and wasted effort. It can also make the system harder to understand and maintain.  