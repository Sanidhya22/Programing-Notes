                                   OOPS (Object Oriented Programming)


Data Hiding - 
• Our internal data should not go out directly that is outside person can't access our internal data directly.
• By using private modifier we can implement data hiding.

Example:
class Account {
private double balance;
......................;
......................;
}
After providing proper username and password only , we can access our Account information.

The main advantage of data hiding is security.
Note: recommended modifier for data members is private

Abstraction - 
• Hide internal implementation and just highlight the set of services, is called abstraction.
• By using abstract classes and interfaces we can implement abstraction.

Abstraction using abstract classes (It can have both abstract and non abstract method)

abstract class Animal {
  public abstract void animalSound();
  public void sleep() {
    System.out.println("Zzz");
  }
}

Abstraction using interfaces

interface Animal {
  public void animalSound(); // interface method (does not have a body)
  public void run(); // interface method (does not have a body)
}

Example :
By using ATM GUI screen bank people are highlighting the set of services what they are offering without 
highlighting internal implementation.

The main advantages of Abstraction are:
1. We can achieve security as we are not highlighting our internal implementation.(i.e., outside person 
doesn't aware our internal implementation.)
2. Enhancement will become very easy because without effecting end user we can able to perform any type of 
changes in our internal system.
3. It provides more flexibility to the end user to use system very easily.
4. It improves maintainability of the application.
5. It improves modularity of the application.
6. It improves easyness to use our system.
By using interfaces (GUI screens) we can implement abstraction


Encapsulation -
• Binding of data and corresponding methods into a single unit is called Encapsulation .
• If any java class follows data hiding and abstraction such type of class is said to be encapsulated class.
Encapsulation = Datahiding + Abstraction

Encapsulation is defined as the wrapping up of data under a single unit. 
It is the mechanism that binds together code and the data it manipulates.
Another way to think about encapsulation is, that it is a protective shield that prevents the data from being 
accessed by the code outside this shield. 

Every data member should be declared as private and for every member we have to maintain getter & Setter 
methods.

class Person {
    // Encapsulating the name and age
    // only approachable and used using
    // methods defined
    private String name;
    private int age;
 
    public String getName() { return name; }
 
    public void setName(String name) { this.name = name; }
 
    public int getAge() { return age; }
 
    public void setAge(int age) { this.age = age; }
}

The main advantages of encapsulation are :
1. We can achieve security.
2. Enhancement will become very easy.
3. It improves maintainability and modularity of the application.
4. It provides flexibility to the user to use system very easily.

The main disadvantage of encapsulation is it increases length of the code and slows down execution.

Tightly encapsulated class -
A class is said to be tightly encapsulated if and only if, all the data members(variables) of that class is 
declared as private. if class has all variables declared as private and if it's inherited by other class which
too has all private data members.

Which of the following classes are tightly encapsulated?
class A {
private int x=10; //Valid
}
class B extends A {
int y=20; //Invalid
}
class C extends A {
private int z=30; //Valid
}

Which of the following classes are tightly encapsulated?
class A {
int x=10; //not
}
class B extends A {
private int y=20; //not
}
class C extends B {
private int z=30; //not
}
Note: if the parent class is not tightly encapsulated then no child class is tightly encapsulated



