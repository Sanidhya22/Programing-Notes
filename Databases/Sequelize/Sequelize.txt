                                            Sequelize
---------------------------------------------------------------------------------------------------------------

Sequelize Documenation - https://sequelize.org/docs/v6/core-concepts/model-basics/

1. Insert - Inserting Records into the table
   // Create a new user
   const jane = await User.create({ firstName: "Jane", lastName: "Doe" });

   We can insert the record in some other way also Model.build() and saving with instance.save()

2. Select - Selecting Records from the table
   // Find all users
   const users = await User.findAll();   

3. Specifying attributes for Select queries - Selecting Specific Columns of the Records from the table
   User.findAll({attributes:['foo','bar']});

4. Applying Where Clause - Selecting Records from the table based on some condition
   User.findAll({where:{authorId:2}});

5. Using Equal Operator - Selecting Records from the table using Equal Operator 
   const { Op } = require("sequelize");

   User.findAll({
          where: {
          authorId: {
          [Op.eq]: 2
        }
      }
    });

6. Using And Operator - Selecting Records from the table using And Operator
   const { Op } = require("sequelize");

   User.findAll({
        where: {
        [Op.and]: [
        { authorId: 12 },
        { status: 'active' }
       ]
     }
    });

7. findByPK - Finding Records from the table using Primary Key
   const project = await Project.findByPk(123);

8. findOne - Finding the first matching Record from the table 
   const project = await Project.findOne({ where: { title: 'My Title' } });   

9. findOrCreate - 
   findOrCreate will create an entry in the table if it does not exist in the table else it will 
   return the matching record from the table.    

   const [user, created] = await User.findOrCreate({
   where: { username: 'sdepold' },
   defaults: {
     job: 'Technical Lead JavaScript'
   }
   });
   console.log(created); // The boolean indicating whether this instance was just created
   if (created) {
   console.log(user.job); // This will certainly be 'Technical Lead JavaScript'
   }

10. findAndCountAll - findAndCountAll combines both findAll and Count.

    const { count, rows } = await Project.findAndCountAll({
    where: {
        title: {
        [Op.like]: 'foo%'
      }
    },
    offset: 10,
    limit: 2
    });
    console.log(count); // returns the count of all records
    console.log(rows); // return array of objects

11. getters - A getter is a get() function defined for one column in the model defination.

    const User = sequelize.define('user', {
    // Let's say we wanted to see every username in uppercase, even
    // though they are not necessarily uppercase in the database itself
    username: {
        type: DataTypes.STRING,
        get() {
        const rawValue = this.getDataValue('username');
        return rawValue ? rawValue.toUpperCase() : null;
      }
     }
    });

    This getter, just like a standard JavaScript getter, is called automatically when the field value is 
    read.

    const user = User.build({ username: 'SuperUser123' });
    console.log(user.username); // 'SUPERUSER123'
    console.log(user.getDataValue('username')); // 'SuperUser123'

    Note ---
    although SUPERUSER123 was logged above, the value truly stored in the database is still 
    SuperUser123. We used this.getDataValue('username') to obtain this value, and converted it to 
    uppercase.

12. setters - A setter is a set() function defined for one column in the model defination, It receives 
    the value for being set.    

    const User = sequelize.define('user', {
    username: DataTypes.STRING,
    password: {
          type: DataTypes.STRING,
          set(value) {
          // Storing passwords in plaintext in the database is terrible.
          // Hashing the value with an appropriate cryptographic hash function is better.
          this.setDataValue('password', hash(value));
        }
      }
    });
    const user = User.build({ username: 'someone', password: 'NotSoÂ§tr0ngP4$SW0RD!' });
    console.log(user.password); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'
    console.log(user.getDataValue('password')); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'

13. Virtual field - 
    A Virtual field can be used in a request as though it is a real data source field., but in reality 
    they don't even exist in the database.

    const { DataTypes } = require("sequelize");

    const User = sequelize.define('user', {
    firstName: DataTypes.TEXT,
    lastName: DataTypes.TEXT,
    fullName: {
    type: DataTypes.VIRTUAL,
       get() {
         return `${this.firstName} ${this.lastName}`;
       },
       set(value) {
         throw new Error('Do not try to set the `fullName` value!');
       }
     }
    });

    const user = await User.create({ firstName: 'John', lastName: 'Doe' });
    console.log(user.fullName); // 'John Doe'


   Difference between Validations and Constraints
   -----------------------------------------------
   Validations are checks performed in the Sequelize level, in pure JavaScript. They can be arbitrarily 
   complex if you provide a custom validator function, or can be one of the built-in validators offered 
   by Sequelize. If a validation fails, no SQL query will be sent to the database at all.

   On the other hand, constraints are rules defined at SQL level. The most basic example of constraint is 
   an Unique Constraint. If a constraint check fails, an error will be thrown by the database and 
   Sequelize will forward this error to JavaScript (in this example, throwing a 
   SequelizeUniqueConstraintError). Note that in this case, the SQL query was performed, unlike the case 
   for validations.

  
   Validations ---

   sequelize.define('foo', {
    bar: {
    type: DataTypes.STRING,
    validate: {
      is: /^[a-z]+$/i,          // matches this RegExp
      is: ["^[a-z]+$",'i'],     // same as above, but constructing the RegExp from a string
      not: /^[a-z]+$/i,         // does not match this RegExp
      not: ["^[a-z]+$",'i'],    // same as above, but constructing the RegExp from a string
      isEmail: true,            // checks for email format (foo@bar.com)
      isUrl: true,              // checks for url format (https://foo.com)
      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format
      isIPv4: true,             // checks for IPv4 (129.89.23.1)
      isIPv6: true,             // checks for IPv6 format
      isAlpha: true,            // will only allow letters
      isAlphanumeric: true,     // will only allow alphanumeric characters, so "_abc" will fail
      isNumeric: true,          // will only allow numbers
      isInt: true,              // checks for valid integers
      isFloat: true,            // checks for valid floating point numbers
      isDecimal: true,          // checks for any numbers
      isLowercase: true,        // checks for lowercase
      isUppercase: true,        // checks for uppercase
      notNull: true,            // won't allow null
      isNull: true,             // only allows null
      notEmpty: true,           // don't allow empty strings
      equals: 'specific value', // only allow a specific value
      contains: 'foo',          // force specific substrings
      notIn: [['foo', 'bar']],  // check the value is not one of these
      isIn: [['foo', 'bar']],   // check the value is one of these
      notContains: 'bar',       // don't allow specific substrings
      len: [2,10],              // only allow values with length between 2 and 10
      isUUID: 4,                // only allow uuids
      isDate: true,             // only allow date strings
      isAfter: "2011-11-05",    // only allow date strings after a specific date
      isBefore: "2011-11-05",   // only allow date strings before a specific date
      max: 23,                  // only allow values <= 23
      min: 23,                  // only allow values >= 23
      isCreditCard: true,       // check for valid credit card numbers

      // Examples of custom validators:
      isEven(value) {
        if (parseInt(value) % 2 !== 0) {
          throw new Error('Only even values are allowed!');
        }
      }
      isGreaterThanOtherField(value) {
        if (parseInt(value) <= parseInt(this.otherField)) {
          throw new Error('Bar must be greater than otherField.');
         }
       }
     }
   }
   });

   Sequelize Raw Queries - Sequelize raw queries takes the raw SQL Queries to perform database
   operation.

   const { QueryTypes } = require('sequelize');
   const users = await sequelize.query("SELECT * FROM `users`", { type: QueryTypes.SELECT });
   // We didn't need to destructure the result here - the results were returned directly

   A second option is the model. If you pass a model the returned data will be instances of that model.

   // This allows you to easily map a query to a predefined model
    const projects = await sequelize.query('SELECT * FROM projects', {
    model: Projects,
    mapToModel: true // pass true here if you have any mapped fields
    });
   // Each element of `projects` is now an instance of Project


   const { QueryTypes } = require('sequelize');
   await sequelize.query('SELECT 1', {
   // A function (or false) for logging your queries
   // Will get called for every SQL query that gets sent
   // to the server.
   logging: console.log,

   // If plain is true, then sequelize will only return the first
   // record of the result set. In case of false it will return all records.
   plain: false,

   // Set this to true if you don't have a model definition for your query.
   raw: false,

   // The type of query you are executing. The query type affects how results are formatted before they are passed back.
   type: QueryTypes.SELECT
   });

  // Note the second argument being null!
  // Even if we declared a callee here, the raw: true would
  // supersede and return a raw object.
  console.log(await sequelize.query('SELECT * FROM projects', { raw: true }));

  Replacements ---
  Replacements in a query can be done in two different ways, either using named parameters (starting 
  with :), or unnamed, represented by a ?. Replacements are passed in the options object.

  If an array is passed, ? will be replaced in the order that they appear in the array
  If an object is passed, :key will be replaced with the keys from that object. If the object contains 
  keys not found in the query or vice versa, an exception will be thrown.

  const { QueryTypes } = require('sequelize');

  await sequelize.query(
    'SELECT * FROM projects WHERE status = ?',
    {
       replacements: ['active'],
       type: QueryTypes.SELECT
    }
  );

  await sequelize.query(
      'SELECT * FROM projects WHERE status = :status',
     {
        replacements: { status: 'active' },
        type: QueryTypes.SELECT
     }
  );

  const { QueryTypes } = require('sequelize');
 
  await sequelize.query(
     'SELECT * FROM projects WHERE status IN(:status)',
     {
        replacements: { status: ['active', 'inactive'] },
        type: QueryTypes.SELECT
     }
  );

