   What do you mean by Design Pattern ?
-> Design Pattern Provides a general solution for a design problem that occurs repeatedly in many projects. 

   What are the advantages and disadvantages of Design Pattern ?
-> The advantages of design Pattern are as follows -

   1. Scalability: By following design pattern, you can create scalable solutions that are flexible and 
      adaptable to changing requirements and environments. 
   2. Maintainability: Design pattern focues on writing clean, modular, and well-organized code, making it 
      easier to understand, debug, and maintain.   
   3. Reuse: Design pattern encourage the reuse of code and design patterns, allowing developers to leverage 
      existing solutions and components instead of writing again same solutions.    
   4. Quality: Design pattern contribute to the overall quality of a solution. High-quality design leads to 
      higher customer satisfaction and better business outcomes.   

   The disadvantages of Design Patterns are as follows - 

   1. Increased Development Time: Implementing design pattern often requires more upfront design and planning, 
      which can increase development time.    
   2. Complexity: Applying design pattern can sometimes result in overly complex code structures, especially 
      if not implemented thoughtfully. 
   3. Resistance to Change: Introducing design pattern to an existing codebase or team culture may face 
      resistance from developers who are aware to different coding practices. 
   4. Learning Curve -  It will be something new for those how have not worked with design pattern.     

   Creational Design Pattern 
   --------------------------------
   Creational design patterns are concerned with the process of object creation, providing mechanisms for 
   creating objects in a manner suitable for the situation.

   1. Singleton Design Pattern -  The Singleton design pattern ensures that a class has only one instance and 
      provides a global point of access to that instance. This pattern is commonly used in JavaScript for 
      managing global state or resources.

   2. Prototype Design Pattern - The Prototype design pattern in JavaScript involves creating objects based on a 
      template of an existing object through cloning.  pattern allows us to create new instances by copying an 
      existing instance, thus avoiding the need for costly creation operations.

   3. Builder Design Pattern - The Builder design pattern in JavaScript helps in constructing complex objects 
      step by step. Instead of creating the object directly with all its parameters, the Builder pattern breaks 
      down the construction process into smaller, more manageable steps. Each step adds a specific part or 
      configuration to the object.

   4. Factory Design Pattern - The Factory design pattern in JavaScript provides a way to create objects without 
      having to specify their exact class. Instead of directly calling a constructor, you call a factory function
      or method, which internally decides which class to instantiate based on certain parameters or conditions.

   5. Abstract Factory Design Pattern - The Abstract Factory design pattern in JavaScript provides an interface 
      for creating families of related or dependent objects without specifying their concrete classes. It's an 
      extension of the Factory pattern, where a single factory can produce multiple types of objects, often 
      organized into families.

   6. Object Pool Design Pattern - The Object Pool design pattern is used to manage a pool of reusable objects. 
      Instead of creating and destroying objects each time they are needed, the Object Pool maintains a 
      collection of initialized objects that can be reused. This can improve performance by reducing the overhead 
      of object creation and destruction, especially in scenarios where creating new objects is expensive.


   Structural Design Pattern 
   ------------------------------------
   Structural design patterns in JavaScript provide ways to compose objects and classes to form larger structures
   while keeping the relationships between them flexible and efficient. These patterns focus on how classes and 
   objects can be combined to form larger structures and promote code reusability and maintainability.

   1. Adapter Design Pattern - the Adapter pattern allows objects with incompatible interfaces to work together.
      It acts as a bridge between the client and the adaptee, translating requests and responses so that they 
      can interact without needing to change their code.
      
   2. Bridge Design Pattern - The Bridge Design Pattern in JavaScript is a structural pattern that decouples 
      abstraction from implementation, allowing them to vary independently. It involves creating separate 
      hierarchies for abstraction and implementation and then connecting them through composition. This pattern 
      is useful when you want to avoid a permanent binding between an abstraction and its implementation, 
      allowing them to evolve independently.

   3. Composite Design Pattern - The Composite Design Pattern in JavaScript is like organizing things into a 
      tree structure, where both individual items and groups of items are treated the same way.
      the Composite pattern lets you treat objects and groups of objects in a uniform way, making it easier to 
      work with complex hierarchical structures.

   4. Decorator Design Pattern - The Decorator pattern allows you to add new features or behavior to an object 
      dynamically by wrapping it with one or more decorators.

   5. Facade Design Pattern - The Facade pattern provides a single, simplified interface to a complex system, 
      hiding its complexity and making it easier to use. 

   6. Flyweight Design Pattern - The Flyweight design pattern is like having a shared resource pool that helps
      conserve memory by reusing objects instead of creating new ones every time.

   7. Proxy Design Pattern  - The Proxy design pattern is pattern that provides us placeholder for another 
      object, allowing us to control access to the original object or add additional functionality.


   Behavioural Design Pattern 
   -------------------------------------
   Behavioral Design Patterns in JavaScript focus on how objects communicate and interact with each other.

   1.Chain of Responsibility - The Chain of Responsibility is a design pattern that allows multiple 
     objects to handle a request without the sender needing to know which object will ultimately process it. 
     It helps us to achieve loose coupling in software application. 

   2.Interpreter - The Interpreter is a design pattern that helps us in interpreting or evaluating a language 
     or grammar. 
   
   3.Commad -   The Commad pattern is a pattern that deals with command.
   4.Iterator - The Iterator design pattern is a design pattern that provides a way to access the elements of an
                collection sequentially.
   5.Mediator - The Mediator design pattern is a design pattern that simplifies complex communication patterns 
                by providing a centralized point of control, making it easier to manage interactions between 
                multiple objects or components.
   6.Observer - The Observer design pattern is design pattern that is based on observable and observer behaviour.
                Its like group of subscribers are listening for the updates from observable.
   7.State -    The State design pattern is a design pattern that allows an object to change its behavior or 
                internal state based on external events or conditions.
   8.Strategy  - The Strategy design pattern is a pattern that allows us to have different strategies or 
                 approaches to solve a problem, and being able to choose the best strategy based on the 
                 situation.

   9.Template -  The Template design pattern is design pattern that allows us to define a template or blueprint
                 for accomplishing a task, where some parts of the task are fixed (template) and some can be 
                 customized by subclasses or implementations.
   10.Visitor -  The Visitor pattern allows you to define a separate visitor object that can visit and interact 
                 with different types of elements in a collection or hierarchy.
   11.Memento -  The Memento pattern is a pattern that allows us to save our progress at any point and restore
                 it later if needed.

   Which design pattern do Event Emitters follow ?
-> Event Emitters typically follow the Observer design pattern.    
   In the Observer pattern, an object (known as the subject or observable) maintains a list of dependents 
   (known as observers) that need to be notified of changes in its state. When the state of the subject 
   changes, it notifies all its observers, typically by calling a method on each observer.  

   Similarly, in many programming languages and frameworks, including Angular and Node.js, Event Emitters are 
   used to implement a publisher-subscriber model, which is a variation of the Observer pattern. The Event 
   Emitter acts as the subject, and components or objects that listen to events are the observers. When an event
   occurs, the Event Emitter notifies all registered listeners by emitting the event, and they respond 
   accordingly.

   Which design pattern do you think is followed in Redux and in Logger instances ?
-> Logger instances typically implement the Decorator design pattern.

   In the Decorator pattern, you enhance or extend the behavior of an object dynamically by wrapping it with one
   or more decorators. These decorators add additional responsibilities to the object without modifying its code
   directly. For example, a logger instance can be seen as a decorator that wraps around other objects or 
   functions to log information about their behavior or state changes.

   Redux follows the Flux Architecture pattern.

   Flux is a design pattern that emphasizes unidirectional data flow and a centralized data store. It was 
   popularized by Facebook for building client-side web applications. Redux, inspired by Flux, implements 
   similar principles.

   If you have a requirement to create instances of different types of database connectors (MySQL, MongoDB, etc.
   ) dynamically. So which design pattern you would recommend?
-> For dynamically creating instances of different types of database connectors, the Factory Method design 
   pattern is well-suited.
   
   The Factory Method pattern is a creational pattern that provides an interface for creating objects in a 
   superclass but allows subclasses to alter the type of objects that will be created. In this scenario, you 
   can define an abstract class or interface for the database connector, and then have concrete subclasses for
   each type of database (MySQL, MongoDB, etc.) that implement the creation logic specific to each database 
   type.

   What pattern is followed in RxJS ?
-> Rxjs follows Observer pattern.  

   What design pattern Angular follows ?
-> Singleton design Pattern , Observer design pattern, Factory design pattern    


	








