                                                 Angular
                          --------------------------------------------------------                      

   What do you mean by Angular?
-> Angular is a Javascript framework that is used to build client side Single Page Applications (SPAs).

   Differnce between clientside Scripting and serverside Scripting ?
->        Client Side Scripting                 |            Server Side Scripting 
    ----------------------------------------------------------------------------------------------
     1. Source code is visible to the user.          1. Source code is not visible to the user.
                                    
     2. It runs on the user's Computer.              2. It Runs on the Webserver.
  
     3. It does not provide Security for data.       3. It Provides more security of data.

     4. HTML,CSS,Javascript is used.                 4. Java,Python,Ruby,PHP are used.


   What is the difference between Reactjs and Angular ?
->            React.js                           |                Angular
  ----------------------------------------------------------------------------------------
   1. It has virtual DOM.                            1. It does not have virtual DOM.
      
   2. React primarily uses JavaScript.               2. Angular is built with TypeScript.

   3. Reactjs does not uses Dependency               3. It uses Dependency Injection Concept.
      Injection Concept.  

   4. It supports Uni-directional data binding.      4. It supports Bi-directional data binding.               


   What is Module in Angular ?
-> Module in Angular refers to a place where you can group the components, directives, pipes, and services, 
   which are related to the application. 

   What are Components in Angular ?
-> Components are the resuable main building block for Angular applications. 
   Each Component is Consisting of --
   A Typescript class file
   A Component testing file	
   A View Template file
   A CSS file

   What is one way binding ?
-> In Angular, one-way data binding refers to the process of binding data from the component class (the TypeScrip
   t code) to the template (the HTML file). This means that changes in the component class will reflect in the
   template, but changes in the template will not affect the component class. 

   Note --
   There are several ways to achieve one-way data binding in Angular
   1. Interpolation
   2. Property Binding
   3. Attribute Binding

   What is Property binding ?
-> Property binding allows us to bind a property of an HTML element to a value or expression in the component 
   class.
   e.g - 
   <input type="text" placeholder="Enter Your Name" [value]="name" >

   What is InterPolation ?
-> Interpolation is denoted by double curly braces {{ }} in the template. It's used to bind data from the 
   component class to the HTML template.

   Note --
   1. We can solve Expression value in the Interpolation
      e.g - {{Data}}
   2. We can not assign a value to a variable in the expression in the interpolation
      {{data = "Sujit Kumar Verma"}}   
   3. We can not perform increment/decrement operation in the interpolation.
      e.g  - {{data++}}
   4. We can not use typeof Operator in the Interpolation
      e.g - {{ typeof(data)}}

   What do you mean by Attribute Binding ?
-> Attribute binding allows us to bind an attribute of an HTML element to a value or expression in the 
   component class. It's also denoted by square brackets [].  
   e.g - <tr>
           <td [attr.colspan]="colspanValue">Table Cell</td>
        </tr>    

   What do you mean by Style binding ?
-> Style binding is used to set a style of a view element. We can set inline styles with style binding.   
   e.g - <nav [style.background-color]="expression"></nav>  

   What is two way Data Binding ?
-> Two-way data binding in Angular allows data to flow both from the component class to the template (like one-
   way binding) and from the template to the component class. This means that changes made in the template will
   reflect in the component class, and vice versa.

   What do you mean by Template reference Variable ?
-> Template reference variables in Angular provide a way to reference HTML elements or Angular components within
   a template. They allow us to access and manipulate DOM elements or components directly in your component 
   class or template. 

   What are the pipes in Angular ?
-> Pipes are a feature that allows us to transform data in our template before displaying it. 
   Types of Pipes in Angular
   1. BuiltIn Pipes -- 
     1.Currencypipe
     2.Jsonpipe
     3.Lowercasepipe
     4.Uppercasepipe
     5.Slicepipe
     6.Decimalpipe
     7.Percentpipe
   2. Userdefined Pipes --

   What do you mean by Pure and Impure Pipes in Angular ?
-> Pure Pipe - A pure pipe is only called when Angular detects a change in the value of the parameters 
   passed to a pipe.
   Impure Pipe -  An impure pipe is called for every change detection cycle no matter whether the value 
   of the parameters passed to a pipe changes.

   Why we need Pipes for transforming HTML Template expression value to other value why don't go with 
   normal funtion instead ?
-> Using pipes in Angular for transforming HTML template expression values offers several advantages over
   using regular functions:
1. Declarative Approach: Pipes allow us to transform data directly in the template, making your template code
   more declarative and expressive. This keeps your component class cleaner and focused on business logic,
   while the template focuses on presentation logic.
2. Reusability: Pipes promote code reuse by allowing us to encapsulate transformation logic into reusable units.
   Once we define a pipe, we can use it in multiple templates across your application without duplicating code.
3. Built-in Pipes: Angular provides a set of built-in pipes for common transformations such as formatting dates,
   numbers, currencies, and more. These built-in pipes are optimized and well-tested, saving the effort of 
   implementing common transformations from scratch.  
4. Async Pipe Handling: The async pipe is particularly useful for handling asynchronous data streams such as 
   observables and promises. It subscribes to the observable or promise, automatically unwraps the value emitted
   or resolved, and updates the template accordingly.   
5. Pipelining: we can chain multiple pipes together to perform complex transformations in a single expression.
   This allows us to compose transformations easily without cluttering your template with multiple function calls.           
   
   What do you mean async pipe in Angular ?
-> The async pipe subscribes to an Observable or Promise and returns the latest value it has emitted. 
   It also unsubscribe Observable or Promise when the component is destroyed. It simplifies the process of 
   subscribing to and unsubscribing from asynchronous data sources in Angular templates.   

   What are Forms in Angular ? 
-> Angular forms are used to handle user's input.
   1. Template Driven Forms 
   2. Reactive Forms 

   What do you mean by Template Driven Forms and What are the pros and cons of Template Driven Form ?
-> Template-driven forms in Angular are a way of creating and managing forms entirely within the HTML template,
   without the need for explicit form-related logic in the component class.
   In template-driven forms, form controls are bound directly to HTML elements using directives such as ngModel,
   and form validation is performed using built-in Angular directives and attributes.

   Advantages of Template Driven Forms -
   ----------------------------------------
   1. Simplicity: They follow a straightforward approach, similar to traditional HTML forms, making them easier
      to understand for developers familiar with HTML.
   2. Built-in Validation: Angular provides built-in validation directives, simplifying the implementation of
      basic validation rules.  
   3. Easy Setup: Template-driven forms are quick and easy to set up, making them great for simple forms with
      basic validation needs.    

   Disadvantages of Template Driven Forms -
   -----------------------------------------   
   1. Limited Flexibility: They're less flexible for handling complex form scenarios or dynamic behaviors 
      compared to reactive forms.
   2. Limited Testability: Testing template-driven forms can be more challenging due to the form logic residing
      mainly in the template.  
   3. Poor Separation of Concerns: Business logic and presentation are mixed, making the code less modular and
      maintainable. 
   4. Potential Performance Issues: Large forms or forms with complex validation rules may suffer from 
      performance issues.  

   What do you mean by Reactive Forms and What are the pros and cons of Reactive Forms ?       
-> Reactive Forms in Angular are a model-driven approach for creating and managing forms in which form control
   instances are created programmatically in the component class. 

   Advantages of Reactive Forms  - 
   ------------------------------------------
   1. Flexibility: Reactive Forms offer greater flexibility and control compared to template-driven forms, 
      making them suitable for complex form scenarios and dynamic form behaviors.
   2. Testability: Since most of the form logic resides in the component class, testing Reactive Forms is
      typically easier and more straightforward compared to template-driven forms.
   3. Separation of Concerns: Reactive Forms promote better separation of concerns by keeping form-related logic
      separate from the presentation layer, leading to cleaner and more maintainable code.
   4. Reactive APIs: Reactive Forms provide reactive APIs for managing form state, enabling more reactive and
      responsive form behavior. 

    Disadvantages of Reactive Forms  - 
   --------------------------------------------
   1. Complexity: Reactive forms may have a steeper learning curve and require more initial setup compared to 
      template-driven forms, especially for developers new to reactive programming concepts.
   2. Boilerplate Code: They may require more lines of code in the component class, particularly for complex
      forms with extensive validation rules and dynamic behaviors.   

   What are the different Scenarios where we use Reactive forms ?
-> The different Scenarios where we use Reactive forms -  
   1. Complex Forms: When we have forms with many fields, validation rules, or dynamic elements, Reactive Forms
      help manage and control these complexities more effectively.   
   2. Custom Validation: When we need to implement custom validation rules beyond basic required fields or email
      formats, Reactive Forms give us the flexibility to create and apply custom validation logic.
   3. Testability: If you want to write unit tests for your form-related logic, Reactive Forms make it easier to
      test form initialization, validation, and interaction in isolation from the template.   

   What are the different Scenarios where we use Template Driven forms ?
-> The different Scenarios where we use Template Driven forms -
   1. Simple Forms: Template-driven forms are great for handling simple forms with basic validation requirements,
      such as login forms, contact forms, or search forms.  
   2. Limited Form Interactivity: If your form doesn't require much interactivity or dynamic behavior, 
      template-driven forms can be a lightweight and efficient choice.

   Which is better Template Driven forms or Reactive forms ?
-> It is based on the user usecases.

   What do you mean by Directives in Angular and What are the different types ? 
-> Directives are allows us to extend the behavior of HTML elements or transform the DOM (Document Object Model)
   structure within your Angular application.
   Types of Directives
   1. Attribute directive --
      Attribute directives allow us to change the appearance or behavior of an element, component, or another 
      directive by applying them as attributes in the HTML markup. 
      e.g -- ngClass, ngModel, ngStyle
  
   2. Structural directive --
      Structural directives modify the DOM layout by adding, removing, or manipulating elements based on 
      conditions. 
      e.g -- *ngIf and *ngFor and ngSwitch.

   3. Component directive -- 
      Components are the most common and powerful type of directive in Angular. They are responsible for 
      defining the UI and behavior of a part of the application by encapsulating the HTML template, CSS styles,
      and logic within a single reusable component.
      @Component({
        selector: 'app-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
       })

     Selector: Tells the component tag name.
     TemplateURL: Consists of the template file used in the component.
     StyleUrls: It is of array type which consists of all the style format files used for the template

   What is Dependency Injection ?
-> Dependency Injection is a design pattern in which a class requests dependencies from external sources rather
   than creating them.
   DI allows you to inject dependencies (services or objects) into components, directives, pipes, and other 
   Angular objects.

   What is Routing ?
-> Routing in Angular refers to the process of navigating between different views or components of an Angular 
   application. 

   What are Query Parameters ?
-> Query Parameters refer to optional parameters appended to the end of a URL.

   What is Dynamic Routing ?
-> Dynamic routing in Angular means creating routes for our application based on certain conditions.
   Instead of defining all routes in our application configuration upfront, you generate routes dynamically as
   needed, often based on user input, data from a server or external sources. 

   What do you mean by Group Routing ?
-> Group routing refers to the concept of organizing related routes into groups or nested routes within a parent
   route. This allows us to structure your application's routing hierarchy in a hierarchical manner,
   making it easier to manage and maintain complex routing configurations.

   Group routing is achieved by defining child routes within a parent route. The child routes are associated 
   with components that are nested within the parent component's template.

   What do you mean by Lazy Loading ?
-> Lazy loading in Angular is a technique used to improve application performance by loading modules asynchronously
   only when they are needed. Instead of loading the entire application upfront, lazy loading splits the 
   application into smaller modules and loads them on-demand, typically triggered by the user's actions such as
   navigating to a specific route.

   What do you mean By Services ?
-> A service is a class that encapsulates business logic, data access, and other reusable functionality that 
   can be shared across different components of the application.
     
   Key characteristics of Angular services include --
   -----------------------------------------------------
   1. Singleton Instances - Angular services are typically instantiated as singleton instances by Angular's 
   dependency injection system. This means that there is only one instance of a service throughout the 
   application.
   2. Async Operations - Services often handle asynchronous operations such as making HTTP requests, handling 
   responses, and managing state changes. Services often handle asynchronous operations such as making HTTP 
   requests, handling responses, and managing state changes. 
   3. Encapsulation of Logic - Services encapsulate functionality that can be reused across multiple components.

   What are the different types of Services in Angular ?
-> Services are typically categorized based on their lifecycle and how they are provided throughout the 
   application. Here are the common types of services in Angular

   1. Singleton Services (provided in root):
      Singleton services are provided at the root level of the application using the providedIn: 'root' syntax 
      in the @Injectable decorator. These services are instantiated once by Angular's dependency injection 
      system and shared across the entire application. They maintain a single instance throughout the 
      application's lifecycle.Example: 

      import { Injectable } from '@angular/core';

      @Injectable({
         providedIn: 'root'
      })
      export class MySingletonService { }

   2. Module-Level Services:
      Services can be provided at the module level using the providers array in the @NgModule decorator. These
      services are available only within the module where they are provided and are not shared with other 
      modules. Each module that imports the module declaring the service gets its own instance of the service.
      Example:   import { NgModule } from '@angular/core';
      import { MyModuleService } from './my-module.service';

      @NgModule({
        providers: [MyModuleService]
      }) 
      export class MyModule { }

   3. Component-Level Services:
      Services can be provided at the component level using the providers array in the @Component decorator. 
      These services are scoped to the component and its children. Each component instance gets its own instance
      of the service.Example:   

      import { Component } from '@angular/core';
      import { MyComponentService } from './my-component.service';

      @Component({
         selector: 'app-my-component',
         templateUrl: './my-component.component.html',
         providers: [MyComponentService]
      })
      export class MyComponent { }

   Why we need services for providing global data sharing to all the components not a normal Class ?
-> Using services for providing global data sharing in Angular offers several advantages over using a normal
   class: -

   1. Singleton Instance - Services in Angular are singleton objects. When you inject a service into multiple
      components, directives, or other services, Angular ensures that there is only one instance of the service
      throughout the application. This ensures that data remains consistent and synchronized across different
      parts of the application.

   2. Dependency Injection - Angular's dependency injection system makes it easy to inject services into 
      components, directives, and other services. 

   3. Centralized Data Management - Services provide a centralized location for managing application data. By
      encapsulating data and business logic within a service, you can avoid duplication and ensure consistency
      in data manipulation and state management. 
     
   What do you mean by Auth Guards ?
-> Auth Guards are used to control access to routes based on the authentication status or authorization rules.
   They intercept route navigation requests and decide whether to allow or deny access to certain routes.

   What are HostListeners ?	
-> @HostListener is a decorator used to declare event handlers directly within a directive or component class. 
   It allows you to listen to events triggered on the host element and execute custom logic in response to those
   events.

   What do you mean by HostBinding ?
-> @HostBinding is a decorator used to bind a directive or component property to a property of the host element
   and dynamically set or update the host element's properties. 

   What is Karma ?
-> Karma is a testing automation tool in angular created by the Angular JS team at Google.   
    
   What do you mean by Content Projection ?
-> Content projection in Angular refers to the technique of passing content, such as HTML markup or components,
   into another component's template from outside the component.  

   What is Router Outlet ?
-> router-outlet is a directive provided by the Angular Router module that acts as a placeholder where the 
   component for the activated route is dynamically loaded or rendered.

   What do you mean by NgModule ?
-> NgModule is a decorator used to define and configure Angular modules. Angular modules used for organizing and
   structuring an Angular application by consolidating related components, directives, pipes, and services into 
   cohesive units.

   What do you mean by Exports in NgModule ?
-> The exports property in an NgModule decorator is used to specify which components, directives, and pipes from
   the current module should be made available for use in other modules that import the current module.

   What do you mean by Imports in NgModule ?
-> imports property in an NgModule decorator is used to specify which other modules should be imported and made
   available for use within the current module. It allows you to include functionality from other modules into
   the current module, enabling code reuse, modularity, and encapsulation.

   What do you mean Providers in NgModule ?
-> providers property in an NgModule decorator is used to configure the Angular dependency injection system.
   It allows you to register services at the module level, making them available for injection throughout the
   module and its components, directives, and other services.
   
   What do you mean Declarations in NgModule ?
-> declarations property in an NgModule decorator is used to declare the components, directives, and pipes that
   belong to the current module.
   It tells Angular which components, directives, and pipes are part of the module and can be used in the 
   templates of components within the module.

   What do you mean Decorator and What are the different types of Decorators ?
-> Decorators are functions that are used to modify or enhance the behavior of classes, methods, properties, or 
   parameters at design time.
   There are four types of Decorator - 
   1. Class Decorators -  @Component
   2. Property Decorators - @Input and @Output
   3. Method Decorators - @HostListener @HostBinding
   4. Parameter Decorators - @Inject

   What do you mean by Bootstrap in NgModule ?
-> bootstrap property in an NgModule decorator is used to specify the root component of the application. 
   It tells Angular which component should be instantiated and inserted into the HTML document to bootstrap the
   application.

   How does the Bootstrapping of angular application happen ?
-> bootstrapping refers to the process of initializing and running an Angular application. It involves loading 
   the root module of the application.
   Here's how the bootstrapping of an Angular application happens: -

   1. Loading the Application JavaScript: 
      The entry point of our application is main.ts. Angular finds the entry point of the application from angular.json.

   2. Initializing Angular Platform:
      After that Angular application initialize the Angular platform. This is done using the platformBrowserDynamic() 
      method present in main.ts file, which creates a platform for running Angular applications in the browser environment.

      import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

   3. Bootstrapping the Root NgModule:
      Once the platform is initialized, the next step is to bootstrap the root NgModule of the Angular 
      application. The root NgModule is typically named AppModule and serves as the entry point of the 
      application. This is done using the bootstrapModule() method, passing the root NgModule class as an
      argument.   

      import { AppModule } from './app/app.module';

      platformBrowserDynamic().bootstrapModule(AppModule)
      .catch(err => console.error(err));

   4. Creating the Root Component:
      When bootstrapping the root NgModule, Angular creates an instance of the root component specified in the 
      NgModule's bootstrap property. This component represents the root of the application's UI hierarchy and
      is responsible for rendering the initial content of the application.   

   5. Rendering the Application:
      Once the root component is created, Angular renders its template and initializes the application's UI. 
      This involves compiling the component's template, binding data to the template, and rendering the 
      resulting HTML in the browser. 

   6. Initializing Services and Components:
      As part of the bootstrapping process, Angular initializes any services and components declared in the root
      NgModule. This includes performing dependency injection to provide services to components and setting up 
      the component tree.

   7. Handling Route Navigation:
      If the application uses Angular's router module for navigation, the router is initialized as part of the 
      bootstrapping process. Angular listens for changes in the browser's URL and navigates to the appropriate 
      route based on the URL.     

   What are the different LifeCycle Hooks in Angular ?
-> Constructor
   ---------------------
   It is used for injection of dependencies into Angular classes.
   It is often used to initialize component properties or perform setup tasks before the component is rendered.

   ngOnInit 
   ----------------------    
   It is called once after the component has been initialized and its input properties have been set.
   It is used for initialization logic such as fetching initial data from a server, setting up subscriptions, or 
   initializing component state.
   It is a method to handle any additional initialization tasks.
   It is a good place to perform one-time initialization tasks for the component.


   Differece between ngOnInit and Constructor 
   ----------------------------------------------------------------------------------------------------
                  Constructor                    |                 ngOnInit    

   1. Used for dependency injection and initializing  1. Used for addition initialization tasks. 
      instance variables. 
   2. Executes before ngOnInit.                       2. Executes after the constructor.
   3. Cannot access the component’s DOM elements.     3. Can access the component’s DOM elements.  

   ngOnDestroy 
   ---------------------
   It is called immediately before the component is destroyed and removed from the DOM.
   It is used for cleanup tasks such as unsubscribing observables, detach event handlers, or canceling timers.
   It is a good place to perform cleanup to avoid memory leaks or resource leaks.     
                   
   ngOnChanges 
   ------------------------
   It is called when it detects changes in data-bound input property.
   Conditons for first time execution order ngOninit and ngOnChanges 
   ------------------------------------------------------------------- 
   If the component has data bound input property then ngOnChanges is before ngOnInit.
   If the component has not any data bound input property then ngOnChanges is called after ngOnInit.

   By default, ngOnChanges performs a reference comparison (===) to detect changes in input properties. If the
   reference to an array or object remains the same, even if its contents have changed, Angular won't consider
   it as a change.
   To ensure that changes in arrays or objects are detected by ngOnChanges, it's recommended to treat them 
   immutably. Instead of modifying the existing array or object, create a new instance with the modified content.
   Within ngOnChanges, we can access the previous and current values of input properties from the SimpleChanges
   object to determine if there have been any changes.

   ngDoCheck
   ----------------------
   It is called during every change detection cycle, immediately after ngOnChanges and ngOnInit.
   It Used for custom change detection logic or detecting changes that Angular's default change detection 
   mechanism might miss.  

   ngAfterContentInit 
   -----------------------
   It is called once after Angular has projected external content into the component's view.
   It is used for initialization logic that depends on content projected into the component, such as accessing
   child components or projected content slots.

   ngAfterContentChecked
   -----------------------
   It is called after Angular has checked the projected content of the component.
   It is used for performing additional checks or actions after the content projection has been updated.
   It is called after every change detection cycle.

   ngAfterViewInit   
   ---------------------- 
   It is called once after the component's view and child views (if any) have been initialized.
   It is used for initialization logic that depends on the component's view being fully initialized, such as 
   accessing DOM elements.

   ngAfterViewChecked
   ----------------------
   It is called after Angular has checked the component's view and child views (if any).
   It is used for performing additional checks or actions after the view has been updated.
   It is called after every change detection cycle.

   What is the Execution order of the Angular LifeCycle Hooks ?
-> 1.Constructor
   2.ngOnChanges 
   3.ngOnInit
   4.ngDoCheck
   5.ngAfterContentInit
   6.ngAfterContentChecked
   7.ngAfterViewInit
   8.ngAfterViewChecked
   9.ngOnDestroy   

   What do you mean by ViewChild ?
-> @ViewChild is a decorator that allows a component to query and access a child component, directive, or element
   from its template. 

   What are ViewChildren ?
-> @ViewChildren is a decorator that allows a component to query and access multiple child components, directives
   , or elements from its template.

   Difference between ViewChildren and ViewChild 
->                    ViewChild                  |                 ViewChildren
   1. ViewChild returns the first matching               1. ViewChildren returns all the matching elements 
      element as ElementRef.                                as a QueryList of items.

   What are the different attributes in ViewChild ?
-> @ViewChild decorator provides various options and attributes to customize how it queries and retrieves
   elements or components from the view. 
   1. selector: 
      Specifies the selector to match the desired child component or directive in the view.
      This can be a tag name, class name, or attribute selector.
   2. static:
      Specifies whether to resolve the query results statically or dynamically.
      When set to true, the query is resolved statically at compile time, and the result is available in the
      component's constructor.
      When set to false (default), the query is resolved dynamically at runtime, and the result is available
      after the view has been initialized.   
   3. first:
      Specifies whether to retrieve the first matching element or component found in the view. 
      When set to true, Angular retrieves only the first matching element or component found in the view.
      When set to false (default), Angular retrieves all matching elements or components found in the view and
      returns them as a QueryList.  

   4. descendants:
      Specifies whether to search for matching elements or components in all descendant elements of the host 
      component or only in the host component's immediate children.
      When set to true (default), Angular searches for matching elements or components in all descendant elements.
      When set to false, Angular only searches for matching elements or components in the host component's 
      immediate children.   

   What do you mean by ContentChild ?
-> @ContentChild is a decorator that allows a component to query and access a single projected child component,
   directive, or element from the content of its host component. 

   What do you mean by ContentChildren ?
-> @ContentChildren is a decorator that allows a component to query and access multiple projected child 
   components, directives, or elements from the content of its host component.   
     
