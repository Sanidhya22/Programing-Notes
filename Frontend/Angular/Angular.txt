                                                 Angular
                          --------------------------------------------------------                      

   What do you mean by Angular?
-> Angular is a framework that is used to build client side applications.
   It is used in the development of Single Page Applications (SPAs).

    Differnece between ClientSide Scripting and ServerSide Scripting  
->  Client Side Scripting              |     Server Side Scripting 
  1.Source Code is Visible to the           1.Source code is not visible to the user.
    User.                                 

  2.It runs on the Computer.                2.It Runs on the Webserver.
  
  3.It does not provide Security for        3.It Provides more security of data.
     data.

  4.HTML,CSS,Javascript is used.            4.Java,Python,Ruby,PHP are used.


   What is the difference between Reactjs and Angular ?
->            React.js                        |             Angular
   1. It Works on the Concept of Virtual        1. It does not have any concept like
      DOM where things first get affected          virtual dom.It directly deals with 
      in the virtual dom and then Browsers         the browsers DOM.
      DOM.
   2. It is Written in Javascript.              2. It is Written in the typescript.
   3. Reactjs does not uses Dependency          3. It uses Dependency Injection Concept.
      Injection Concept.  
   4. React.js holds JSX hence the usage        4. Angular, on the other,hand is a mere 
      of HTML codes and syntax is enabled.         subset of HTML.
      But this doesnâ€™t make react js a 
      subset of HTML. This is purely 
      JavaScript-based.                      

   What is InterPolation in Angular ?
-> Angular interpolation is used display a component property in the respective
   view template with double curly braces syntax.Interpolation is used 
   for one way data binding. Interpolation moves data in one direction from
   components typescript file to respective HTML templates.
   Note --
   1. We can solve Expression value in the Interpolation
    e.g - 
    {{Data}}
   2. We can not assign a value to a variable in the expression in the interpolation
    {{data = "Sujit Kumar Verma"}}   
   3. We can not perform increment/decrement operation in the interpolation.
    e.g  - {{data++}}
   4. We can not use typeof Operator in the Interpolation
    e.g - {{ typeof(data)}}


   What is Module in Angular ?
-> Module in Angular refers to a place where you can group the components,
   directives, pipes, and services, which are related to the application. 

   What are Components ?
-> Components are the main building block for Angular applications. 
   Each Component is Consisting of --
   A Typescript file
   A Component Testing file	
   A View Template file
   A CSS file


   What is one way binding ?
-> One-way data binding in Angular is a unidirectional Data binding Technique.It is a way 
   to bind data from the component ts file to the view template or vice versa - from view
   to the component.

   Note --
   we can do one binding by using interpolation.
   <h1>{{Data}}</h1>
   Property binding also comes under one way binding.
   <input type="text" placeholder="Enter Your Name" [value]=name >


   What is Property binding ?
-> Property binding in Angular is technique which is used to set values for properties of HTML
   elements or directives.
   e.g - 
   <input type="text" placeholder="Enter Your Name" [value]=name >

   What is two way Data Binding ?
-> Two-way data binding refers to sharing data between a component class file 
   and its View template. If you change data in one place, it will automatically 
   reflect at the other end. For example, if you change the value of the input 
   box, then it will also update the value of the attached property in a 
   component class.

   What do you mean by Template reference Variable ?
-> Template variables helps us to get the reference of HTML template element in the component file.

   What are the pipes in Angular?
-> Pipes are simple functions used in HTML template expressions to accept an 
   input value and return a transformed value. Pipes are useful because 
   you can use them throughout our application, while declaring each 
   pipe once.
   Types of Pipes in Angular
   1. BuiltIn Pipes -- 
     1.Currencypipe
     2.Jsonpipe
     3.Lowercasepipe
     4.Uppercasepipe
     5.Slicepipe
     6.Decimalpipe
     7.Percentpipe
   2. Userdefined Pipes --


   What do you mean by Pure and Impure Pipes in Angular ?
-> Pure Pipe - A pure pipe is only called when Angular detects a change in the value or the parameters 
   passed to a pipe. 
   Impure Pipe -  An impure pipe is called for every change detection cycle no matter whether the value 
   or parameter(s) changes.

   Why we use impure pipe over pure pipes even if reubs a
-> Impure pipes are required because angular ignores changes to composite objects. Impure pipes execute 
   every time angular detects any changes regardless of the change in
   
   What are Forms in Angular ? 
-> Angular forms are used to handle user's input.
   Types of Angular forms --
   1.Template Driven Forms -
     1. Mostly Work done in the Component template.
        In a Template-Driven approach, most of the logic is driven from the template.
     2. Template-driven forms are asynchronous in nature.
     3. It is Unstructured and Mutuable.
     
   2.Reactive Forms -
     1. Mostly Work done in the Component class.
        In Reactive-Driven approach, the logic resides mainly in the Component or Typescript code. 
     2. Reactive forms are mostly synchronous in nature.
     3. It is Structured and Immutable.
     

   What do you mean by Directives in Angular ? 
-> Directives are classes that add additional behavior to HTML elements in our Angular applications. 
    Types of Directives
      1. Attribute directive --
      Change the appearance or behavior of HTML elements
      e.g -- ngClass, ngModel, ngStyle
  
     2. Structural directive --
      Structure directives manipulate the HTML DOM elements.
      e.g -- *ngIf and *ngFor and ngSwitch.

    3. Custom directive --
      Custom directives are the Userdefined Directives.

   4. Component directive -- 
      It Provides structure design and the working pattern of the components.
      It is the most commonly-used directive in any Angular project.
      @Component({
        selector: 'app-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
       })

     Selector: Tells the template tag which specifies the beginning and 
     end of the component.
     TemplateURL: Consists of the template used for the component.
     StyleUrls: It is of array type which consists of all the style format 
     files used for the template

     What is Dependency Injection ?
->   Dependency Injection is a design pattern in which a class requests dependencies
     from external sources rather than creating them.

     The Different Scenarios of Providing of Dependency 

     Case 1 --
     ------------------------------------------------------------------------------------------
      The first step is to add the @Injectable decorator to show that the class can be injected.

      @Injectable()
      class HeroService {}
      
      At the Component level, using the providers field of the @Component decorator. In this case the 
      HeroService becomes available to all instances of this component and other components and directives
      used in the template. For example:


     @Component({
        selector: 'hero-list',
        template: '...',
      providers: [HeroService]
      })
      class HeroListComponent {}

      When you register a provider at the component level, you get a new instance of the service with 
      each new instance of that component.

      Case 2 --
      -----------------------------------------------------------------------------------------------
      The first step is to add the @Injectable decorator to show that the class can be injected.

      @Injectable()
      class HeroService {}

      At the NgModule level, using the providers field of the @NgModule decorator. In this scenario, the 
      HeroService is available to all components, directives, and pipes declared in this NgModule. 
      For example:

      @NgModule({
          declarations: [HeroListComponent]
          providers: [HeroService]
         })
      class HeroListModule {}

      When you register a provider with a specific NgModule, the same instance of a service is available
      to all components in that NgModule.

      Case 3 ---
      ---------------------------------------------------------------------------------------------------

      At the application root level, which allows injecting it into other classes in the application. 
      This can be done by adding the providedIn: 'root' field to the @Injectable decorator:

      @Injectable({
          providedIn: 'root'
      })
      class HeroService {}

      When you provide the service at the root level, Angular creates a single, shared instance of the 
      HeroService and injects it into any class that asks for it.


      Injecting a Dependency
      The most common way to inject a dependency is to declare it in a class constructor. When Angular 
      creates a new instance of a component, directive, or pipe class, it determines which services or 
      other dependencies that class needs by looking at the constructor parameter types.

    What is Routing ?
->  Routing basically means navigating between pages.routing allows angular to display 
    different "pages" or components on specific Urls.

     What is Dynamic Routing ?
->   Dynamic routing, also called adaptive routing, It is a process where a router can forward
     data with the Route URL.

     What do you mean by Group Routing ?
->   Group Routing allow us to group all the routes related to our modules.      
     Group Routing are helpful in the situation when you want to apply one attribute to all
     the routes. 

     What do you mean by Lazy Loading ?
->   Lazy loading is a technology of angular that allows us to load specific JavaScript 
     components when a specific route is activated. It improves application load time speed by splitting
     the application into many bundles. When the user navigates by the app, bundles are
     loaded as needed.

     What do you mean By Services ?
->   An Angular service is like simple Class file. All we have to do is create a class
     and add methods and properties. Then we can create an instance of this class in our
     Component and call its methods and data Members.
     
     Different Features of Services --
     1. Using Services we can create Global data and We can share data between components
     2. Implement Resuable Application Logic.
     3. Using Services we can External Interaction like Database Connection.
     There are two type of Services -
     1. Builtin Services
     2. Userdefined Services

     List of Predefined Services -- 
     1. http - This service facilitates communication with the remote HTTP servers via the
               browserâ€™s XMLHttpRequest object.
     2  log - Console logger.
     

    What do you mean by Auth Guards ?
-> The auth guard is an angular route guard that's used to prevent unauthenticated or 
    unauthorized users from accessing restricted routes, it does this by using the
    CanActivate method.

    What are HostListeners ?	
->  HostListeners lets us listen for events on the host element or component directive.

    What do you mean by HostBinding ?
->  HostBinding lets us set properties on the host element or component directive.

    What is Karma ?
->  Karma is a testing automation tool created by the Angular JS team at Google.   
    
    What do you mean by Content Projection ?
->  Content projection is a pattern in which we insert, or project the content to some other
    Component to which we want to use it. 

    What is observables in Angular?
->  Observables are functions that throw values. Objects called observers subscribe to these
    values. 
    we use Observables to perform asynchronous operation and handle asynchronous data.
    Observable Emits stream of Data over a period of time.It is provided by JavaScript rxjs 
    libarary.

    Note --
    we can perform asynchronous operation using promises and observable.
    we use Observables to perform asynchronous operations and handle asynchronous data.

    Javascript is a Single threaded programming language which means code is executed line by
    line.
    In that case suppose when we are making http request to the server and it is taking more 
    time so In that case the next statment will have to wait until http request complete.
    so we can say synchronous code is blocking in nature, In this case asynchronous code 
    comes into picture.
    In case of asynchronous code http request will run in the background and the next code 
    after the http request will executes in the main thread.

    An Observable is a function that converts ordinary stream of data into an observable stream 
    of data.

    What do you mean by Observer ?
->  An Observer is a consumer of values delivered by an Observable.   

    A handler for receiving observable notifications implements the Observer interface. 
    It is an object that defines callback methods to handle the three types of notifications 
    that an observable can send: 

    1. next (Required) - A handler for each delivered value. Called zero or more times after 
    execution starts.
    2. error (Optional) - A handler for an error notification. An error halts execution of the
    observable instance.
    3. complete (Optional) - A handler for the execution-complete notification.It executes 
    when the observable execution is completed.    

    What do you mean by Multicasting ?
->  Multicasting is the practice of broadcasting to a list of multiple subscribers in a 
    single execution.    
    With a multicasting observable, we don't register multiple listeners on the document, 
    but instead re-use the first listener and send values out to each subscriber.

    What do you mean by Rxjs? 
->  RxJS stands for (Reactive Extensions for JavaScript).It is a JavaScript libarary that allows
    us to work with asynchronous data stream.

     we can use some methods from the RxJS library that create simple observables of 
     frequently used types:

     1. of(...items)	- Converts the arguments to an observable sequence.
     2. from(iterable) - This method is used to convert an array to an observable Sequence.
    
   What do you mean by Subscribe in Angular ?
-> Subscribe() is a method in Angular that connects the observer to observable events. 
   Subscribe Method detects for any change is made in the observable. 
   observer observes the results using the Subscribe Method. 
   Subscribe() is a method from the rxjs library, used internally by Angular.

   What is the differnece between observables and promises?
->         Observables                           |   Promises
     1. Emit Multiples values over a period         1. Emit a single value at a time.
        of time.
     2. They are not executed until we subscribe    2. Execute immediately after creation.
        to them using subscribe method. 
     3. Have Subscribtion that are cancellable      3. Promises are not cancellable.
        using unsubscribe method, which stops the
        listener from futher receving values.   

    What do you mean by Subjects?
->  A Subject is a special type of Observable that allows values to be multicasted to many
    Observers. The subjects are also observers because they can subscribe to another 
    observable and get value from it, which it will multicast to all of its subscribers. 
    Basically, a subject can act as both observable & an observer.

    What do you mean by Unicast ?
->  Unicasting means that each subscribed observer own an independent execution of the observable. 

    What do you mean by Muticast ?
->  Multicasting basically means that one observable execution is shared among multiple subscriber.

    Differnece between Subjects and Observables

                        Subjects                |                Observables

   1. Subjects are Muticast.                         1.Observables are Unicast.

   2.In case of Subjects single observable           2.In case of observable everytime a
     execution is created for all subscribers.         new subscriber will come new execution is 
                                                       created for that.

    What do you mean by Behavioural Subject?
->  Behaviourable Subject is a special type of observable Which multicast its values to 
    all of the obsevers who has subscribed to it.It can also act as an Observer.
    BehaviorSubject holds one value. when it is subscribed it emits that value immediately.


    Differece between Subjects and BehaviorSubject

                       Subjects               |               BehaviorSubject
   1. BehaviorSubject holds one value.              1. A Subject doesnâ€™t hold a value.         
      When it is subscribed it emits a value   
      immediately. 
   2. No is way to provide default value            2. we can provide defaullt value in
      in Subject.                                      BehaviorSubject.

   What do you mean by RelaySubject ?
-> RelaySubject is a variant of Subject which buffers old values and emit those values to 
   new Subscribers.  
   Relay Subject does not holds any initial value.  

   What do you mean by AsyncSubject?
-> AsyncSubject is a Subject variant where only the last value of the Observable execution is
   sent to its Subscribers and only when the complete method is called.
   
   AsyncSubject is useful for fetching and catching resources, because In case of http 
   get request where we expect one response when the execution is complete. 

   It is similar to Promises but the difference between them is that
   Promies get executed immediately when it is declared.
   AsyncSubject does not get executed immediately until we subscribes to it.
      
   What is Router Outlet ?
-> Router-outlet in Angular works as a placeholder which is used to load the different
   components dynamically based on the activated component or current route state.

   What is the purpose of ngModule ?
-> NgModule is a class Marked by @NgModule decorator.
   The purpose of NgModule is to organize the application.
   The structure of an NgModule contains declarations, imports, providers, exports and 
   bootstrapping.

   What are Exports in NgModule in Angular ?
-> It enables an Angular module to expose any of its components/directives/pipes to the
    other modules from the current module in the applications.

   What are Imports in NgModule in Angular ?
-> Imports we use it to make the imported modules declarations in the current module.
   It is Used to import supporting modules likes FormsModule, RouterModule, etc.
   
    What are Declarations in Angular ?
->  Declarations we use it to make components, directives, and pipes from the current module 
    available to other components, directives, and pipes in the same module.
    The Declarations array is used to declare components, directives, and pipes into the module 
    in which they belong.

    What is Bootstrapping in Angular ?
->  The process of loading the index.html page, app-level module, and app-level component is 
    called Bootstrapping.
    It is used to start up an Angular application manually, it provides more control over
    the initialization of the application.   

    How does the Bootstrapping of Angular Application is Done ?
->  The Bootstrapping of Angular Application starts with angular.json there it looks For
    paths of index.html and main.ts in angular application.
    Then it moves to main.ts where it looks for platformBrowserDynamic().bootstrapModule(Module Name)
    Method argument.
    Then it moves to Specified ModuleName file Specified in the BoostrapModule method and there it looks 
    for Bootstrap Property in the in NgModule Decorator.
    Then it moves to Specified Component Name in Bootstrap Property of @NgModule Decorator.
    There it looks for template url and looks into the contents of template file 
    and project them into index.html.

   What are Providers in Angular ?
-> Providers is Used to inject the services required by components, directives, pipes in our module.

    What are Query Parameters ?
->  Query Parameters in angular allow us passing optional parameters across any route in the 
    Application.

    What is Decorator and What are the different types of decorator ?
->  An Angular Decorator is a function, using which we attach metadata to a class, method,
    ,property, or parameter.
    There are four types of Decorator- 
    1. Class Decorators -  @Component and @NgModule
    2. Property Decorators - @Input and @Output
    3. Method Decorators - @HostListener @HostBinding
    4. Parameter Decorators - @Inject

    What do you mean by Style binding ?
->  Style binding is used to set a style of a view element. We can set inline styles with 
    style binding.

    <nav [style.background-color]="expression"></nav>

   What do you mean by MVC Pattern ?
->  MVC Stands for Model  View Controller.This pattern is used to seprate Application 
    Concerns
    1. Model - Model contains only the pure application data, it contains no logic describing
               how to present the data to a user.
    2. View - The View presents the modelâ€™s data to the user. The view knows how to access 
              the modelâ€™s data.
    3. Controller - The Controller exists between the view and the model. It listens to 
                    events triggered by the view (or another external source) and executes 
                    the appropriate reaction to these events. 

   What do you mean by Child Routing ?
-> Routes Which are the childs of the Parent Route.                  
     
   What are ViewChild ?
-> ViewChild decorator allows us to access and manipulate the HTML template, properties and method of 
   child component from a parent component and it also allows us to access the HTML template of 
   the current component.

   What are ViewChildren ?
-> ViewChildren is same like ViewChild but it returns all the matching elements as a QueryList of 
   items. 

   Difference between ViewChildren and ViewChild 
->                    ViewChildren             |              ViewChild
   1.ViewChild returns the first matching         1.ViewChildren returns all the matching elements 
     element.                                       as a QueryList of items.

   What does static do in ViewChild ?
-> The static option for @ViewChild() and @ContentChild() tells us whether we can access
   Specified ViewChild Element in the Component ngOnInit LifeCycle method or not.
   true denotes we can access the HTML element of the template file in the ngOnInit Lifecycle
   hook Method while false denotes we can't.

   What do you mean by ContentChild ?
-> ContentChild is used to get the reference of the Projected Content in the DOM.

   What do you mean by ContentChildren ?
-> ContentChildren is used to get the reference of all the matching Projected Content in the DOM.  

   What do you mean by ChangeDetection Strategy in Angular ?
-> Angular Change Detection Strategy is a mechanism in angular by which the updates to the component 
   is tracked and component is triggered to Re-render.   
   we have a Property changeDetection in the Component decorator, which can have two values
   changeDetection.onPush and changeDetection.defaullt.

   What are the different types of Change Detection Strategy in Angular ?
-> There are 2 types of Change Detection Strategy in Angular
   1.Default Strategy  -

   Default change detection strategy is applied to the component while it is created. If a component 
   strategy is not configured, it is marked as default. 
   Note --

   In this strategy, the change detection cycle runs on each and every event that occur inside that 
   Component and child Component.
   if any any property chnages in the component and child component then rerendering of the component 
   occurs.


   2.OnPush Strategy - 

   The change detection doesn't run automatically for every component anymore. Angular instead listens 
   for specific changes and only runs the change detection on a subtree for that component.
   Note --

   In this case if any Property changes in the component and its child Component then rerendering
   of the component does not occurs we have to do it manually. 

   For forcibly rerendering the component template we use detectChanges().method. 

   Conditons where OnPush Strategy fails.
   1. In Case of Event Handlers when some Event Occurs.
   2. In Case of Input Decorators when new Object Reference is passed.
   3. In Case of Output Deceorator when new Object Reference is passed.
   4. In Case of Async Pipe.


   Benefits of onPush Change Detection
   -----------------------------------
   No Unnecessary Dirty Check in the Child Components.
   
   What are the different methods of ChangeDetectorRef Class ?
-> These are the Different methods of ChangeDetectorRef 
   1. markForCheck - Marks the component as It was changed, so that it can be checked for 
      an Update. 
   2. deatch - excludes the view from the change detection tree, which means no check will be
      triggered for that component until that view is reattached again. 
   3. detectChanges - checks the View and its child components for changes.
   4. checkNoChanges - check the view  and its child components for no changes and it will throw 
      some error if some changes are detected.
   5. reattach - reattach the view that was previously detached so that new changes can be 
      detected.   

   What do you mean by TestBed ?
-> TestBed is the primary api for writing unit tests for Angular applications and libraries.

   What do you mean by Zone.js and Why we use it ?
-> Zone.js we use it for monitering all the Synchronus and Asynchronus tasks changes in our angular 
   project for Angular Change detection Cycle.
   Zone.js can observe all the states of synchronous and asynchronous operations. 

   What do you mean by NgZone in angular ?
-> NgZone is a service in angular that provides a run() method that allows you to run 
   all asynchronous operations in that function, triggers change detection automatically.

   NgZone basically Provides us Two Methods 
   1. run() - Runs all the asynchronous code inside this function and triggers change detection
      automatically. 
   2. runOutsideOfAngular() - When we want to keep Something outside of the automatic trigger of 
      angular change detection then we keep that thing inside this function.

   How does Angular ChangeDetection Works ?
-> In Angular Zone.js is responsible for automatic trigger of Angular Change detection Cycle.
   Angular uses NgZone service to access run method for Asynchronus operations.
   After then it uses Angular Change detection Strategy update the components based on 
   changes.

   What are the different LifeCycle Hooks in Angular ?
-> 1.Constructor - Contructor is used for Dependency Injection.
   2.ngOnInit -    It is used for the initialization of the Data in the component.
                   It is called only once during component loading.


   Differece between ngOnInit and Constructor 
   ----------------------------------------------------------------------------------------------------
                  Constructor                    |                 ngOnInit    
      1.Should be used only for Dependency            1.Should be used to handle any intial logic
        Injection.                                      that need to execute only once.
      2.It's part of typescript so handled by         2.It is a part of Angular so handled by Angular
        Javascript.                                     framework.
      3.Binding has not happened till that time       3.Binding with UI is done so can access all
        so cannot access data bound input property.     data bound input property.


   ngOnDestroy - It is a LifeCycle hook that is called when a directive, pipe, or component is destroyed.
                 This LifeCycle hook is used for any custom cleanup that needs to occur when the instance 
                 of directive, pipe, or component is destroyed, by doing so we can prevent memory leakage.      

                 Resources that needs to be free before going to other component
                 1.unsubscribe Observables
                 2.detach Event handlers
                 3.Stop Interval timers
                   
   3. ngOnChanges() - The ngOnChanges is a life cycle hook, which angular fires when it detects changes to 
                      data-bound input property.

                      if the Component has any one more more data bound input property changes then 
                      ngOnChanges is called before ngOnInit.

                      if the component has not any data bound input property then ngOnChanges
                      is called after ngOnInit.

                     During change detection, when angular checks components input properties for 
                     change, it uses essentially  === for dirty checking.
      
                     For Array and objects, this means the references only are dirty checked.Since the 
                     product array references is not changing ,ngOnChanges will not be called.

                     It also accepts one argument changes of SimpleChanges type. It is also 
                     used to keeep track changes of previous value or current value.

                     It is not able to detect changes for Arrays and Object.

   4.ngDoCheck() -- ngDoCheck is a life cycle hook which is used to detect and act upon  
                    changes that Angular won't be able to detect on its own.

                    It is called during Every change detection cycle and runs immediately after 
                    ngOnChanges and ngOnInit.   

   5. ngAfterContentInit() --    A Life cycle hook that Angular calls after all of the Projected
                                 content to a Component has been intialized has been in that component.

                                 It called immediately after ngDoCheck.
                                 It called only once during first change detection cycle after
                                 all the projected content has been intialized.
                        

   6. ngAfterContentChecked() -- ngAfterContentChecked is the life cycle hook, that angular calls
                                 during every change detection cycle when angular detects 
                                 changes in the Projected Content.

                                 This hook is called after ngDoCheck and ngAfterContentInit.


   7. ngAfterViewInit()       -- ngAfterViewInit is a LifeCycle hook that angular calls when 
                                 angular completes initialization of the component view 
                                 and its child views.

                                 It is called only once during the first change detection cycle, 
                                 immediately after the creation of the component.

   8. ngAfterViewChecked()    -- ngAfterViewChecked is a LifeCycle that angular calls after
                                 when detects changes in the components view or child views.

                                 ngAfterViewChecked is called after ngAfterContentChecked.

                                 It is called after every subsequent ngAfterContentChecked.                              

   What is the Execution order of the Angular LifeCycle Hooks ?
-> 1.Constructor
   2.ngOnChanges 
   3.ngOnInit
   4.ngDoCheck
   5.ngAfterContentInit
   6.ngAfterContentChecked
   7.ngAfterViewInit
   8.ngAfterViewChecked
   9.ngOnDestroy   


   What are diffrences between hot and cold Observables ?
->               Cold Observables                    |                Hot Observables 
   -------------------------------------------------------------------------------------------------
   1. In cold observables the values are                1. In Hot obervables the value producer 
      declared, created, produced inside the code          exist outside the observable. since 
      that defines an observable.                          the value is outside the observable
                                                           it can execute if there are no Observers
                                                           also.                           

   2. These are Unicast which means it pushes          2. These are Multicast.
      values to single observer at a time.  


   What do you mean by Map in Angular ?
-> The Angular observable Map operator takes an observable source as input. It applies a project function
   to each of the values emitted by the source observable and transforms it into a new value. It then
   emits the new value to the subscribers.

   What are the different types of Maps in Angular ?
-> These are the following types of Maps in Angular
   1. MergeMap
   2. SwitchMap
   3. ConcatMap

   What do you mean by MergeMap in Angular ?
-> The mergeMap() operator is also called flatMap. This operator is best to use when you want to flatten
   an inner observable and manually control the number of inner subscriptions. The RxJS mergeMap() 
   operator maintains multiple active inner subscriptions at once and emits single newly created 
   observable at the end.

   What do you mean by MergeAll ?
-> Converts a higher-order Observable into a first-order Observable which concurrently delivers all
   values that are emitted on the inner Observables.
   MergeAll flatten all of the inner observables.

   What do you mean by SwitchMap in Angular ?
-> SwitchMap is same like a MergeMap but insted of working with all emitting values, it only works  
   with latest emitted value and cancels the previous emitted values.
   It effects can be seen while using delay operators.

   What do you mean by SwitchAll in Angular ?
-> Converts a higher-order Observable into a first-order Observable which delivers the last emitted value
   and cancels the previously emitted value.

   What do you mean by ConcatMap ?
-> Concat is also like a Mergemap but It emits the output in a serialized manner waiting for each
   one to compelete before emitting the next.
   It returns the output in an ordered way.

   What do you mean by ConactAll ?
-> Converts a higher-order Observable into a first-order Observable which concurrently delivers all
   values in a ordered manner that are emitted on the inner Observables.

   What do you mean by Interceptors in Angular ?
-> Interceptors are a unique type of Angular Services that we implement to intercept incoming or 
   outgoing Http Requests using the Httpclient.
 
                  Request                    Request
   Angular App  ---------->  Interceptors  ----------->  Server 
                <----------                <-----------
                  Response                   Response 

   Operations Using Interceptors
   1. Modify HTTP Headers 
   2. Modify the Request Body 
   3. Set Authentication / Set Authorization Token 
   4. Mocked the Backend API 
   5. Modify the Response 
   6. Error Handling      


   What are the different attributes we use for declaration of Interceptor in Module.ts file ?
-> We use three Attributes for declaration of Interceptor -
   1. useClass - Here we specifiy the name of the Interceptor.
   2. provide  - Providing HTTP_INTERCEPTORS value to this attribute will let Angular know 
                 this is not a normal Service, It is an Interceptors.
   3. multi    - Specifying true value for this Attribute will let Angular know Execute this 
                 Interceptor and Other Interceptor too otherwise the last Interceptor will 
                 override all the previous Interceptor which means only the last Interceptor will 
                 execute.

   What do you mean by ViewcontainerRef ?
-> ViewContainerRef(VCR) represents a container where one or more view can be attached.
 
   What do you mean by ElementRef ?
-> Angular ElementRef is a wrapper around a native DOM element inside of a View. 
   It's simply a class that wraps native DOM elements in the browser and allows you to work with the 
   DOM by providing the nativeElement object which exposes all the methods and properties of the 
   native Element.

   What do you mean by Renderer ?
-> Renderer2 is a class that allows to manipulate elements of browsers DOM without touching the DOM 
   directly.   

   Why we use Renderer Over ElementRef ?
-> Using Renderer for manipulating the DOM does not break server side rendering or web workers
   because we are indirectly accessing the DOM elements.  
   While Using ElementRef for accessing DOM elements break server side rendering or web workers
   because we are directly accessing DOM elements. 

   What do you mean by ComponentFactoryResolver ?
-> A simple registry that maps Components to generated ComponentFactory classes that can be used to
   create instances of components.   

   What do you mean by Dynamic Component in Angular ?
-> The Dynamic Components are the components which are Instantiated and Placed in the Angular Application 
   at the runtime.
    Angular Dynamic Components are the components which are created using ComponentFactoryResolver 
   and ViewContainerRef.                            
   

   What do you mean by Ngrx in Angular ?
-> Ngrx stands for Angular Reactive Extensions. NgRx is a state management system that is based on 
   the Redux pattern.   

   What do you mean By Actions?
-> Actions are Plain JavaScript Objects that have a field type action that tells which action
   is performed. 

   What do you mean by Reducers?
-> Reducers are functions that take the current state and an action as arguments and return
   a new state result.

   What do you mean by Store?
-> A store is a state container which holds the application's state.
   Every Redux store has a single root reducer function.

   Notes- The only way to change the state is to dispatch an action.
          The global state of our application is stored as an object inside a single store.

   What do you mean Server side Rendering ?
-> Server-side rendering (SSR) is an application's ability to convert static HTML, CSS, JavaScript
   files on the server into a fully rendered HTML page for the client. 
   
   In Case of Server Side rendering when The web browser submits a request for information from the 
   server then server responds instantly by sending a fully rendered page to the client.

   Advantages of Server Side Rendering 
   ------------------------------------------
   1. A server-side rendered application enables pages to load faster, improving the user experience.
   2. Server-Side rendering efficiently load webpages for users with slow internet connection or
      outdated devices.

   Disadvantages of Server Side Rendering 
   ------------------------------------------
   1.Server Side rendering is good for smaller static application but is not good for bigger 
     complex applications because rendering on server will take more time for complex applications.
   2.Server-Side rendering can be costly and resource-intensive as the server takes on the full burden
      of rendering content for users.  

   What do you mean by View Encapsulation in Angular ?
-> In View Encapsulation A Component styles can be encapsulated within the component's host element
   so that they don't affect the rest of the Application.   
   The Component's decorator provides the encapsulation option which can be used to control how the
   encapsulation is applied on a per component basis. 

   Angular Provides Following Encapsulation Strategies
   1. Emulated - In this Strategy Style will only be accessible inside that component only.
                 Actually one unique attribute will get attached with each component element
                 which helps in keeping style limited to component only.
                 It is the by default View Encapsulation Strategy.
   2. Native - It will create a Seprate DOM for that component.
   3. ShadowDom - It's same like Native Strategy.
   4. None - Style will become global across the angular application across same classname, id and  
             selector. 

   What do you mean by Internationalization in Angular ?
-> Internationalization is the process of supporting multiple languages in your Angular applications.      
            
          
   

