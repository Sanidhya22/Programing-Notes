                                           Angular Testing 
                            -----------------------------------------------

    What do you mean by createSpyObj in Angular ?
->  createSpyObj is used to create a mock that will spy on one or more methods.    

    What do you mean by Testbed in Angular ?
->  TestBed is the primary api for writing unit tests for Angular applications and libraries.    
    TestBed we can use to test both the template and class file of a Component.

    TestBed.configureTestingModule({declarations:[ComponentName]});

    There is no need to declare or import anything else. the default test module is pre-configured 
    with something like the BrowserModule from @angular/platform-browser.

    const fixture = TestBed.createComponent(ComponentName);

    TestBed.createComponent creates an instance of the specified component and also adds a 
    crossponding element to the test-runner DOM, and returns a Component Fixture.

    const component = fixture.componentInstance();

    This will us access to all the properties and methods in the component class.
    Using fixture nativeElement and debugElement  we will acccess the elements in the 
    component template.

    expect(component).toBeDefined();

    Note ---

    * The Component which we want to test that component Name we specify in the declarations in 
      TestBed ConfigueTestingModule.
    * Fixture is consisting of both componentInstance and Template HTML elements reference.
    * Using componentInstance we will get the Instance of the Component.
    * Using nativeElement and debugElement we will the reference of HTML elements.

    What do you mean by nativeElement in Angular ?
->  nativeElement is the direct way of accessing the DOM Element as an "inspectable. 

    The Value of ComponentFixture.nativeElement has the any type. Angular can't know at compile 
    time what kind of HTML element the nativeElement is or if It is an HTML element.
    The Application might be running on a non browser platofrm such as the server or a web 
    worker. 

    The tests we do are designed to run in a browser so a nativeElement value will always be 
    an HTMLElement or one of its derived class.we can use the querySelector to traverse
    the HTML element tree.  

    e.g -

    it('should have <p> with Sujit Kumar Verma',()=>{
        const bannerElement:HTMLElement = fixture.nativeElement;
        const p = bannerElement.querySelector('p');
        expect(p.textContent).toEqual("Sujit Kumar Verma');
    })

    What do you mean by debugElement in Angular ?
    
->  DebugElement is an Angular class that contains all kinds of references and methods relevant to 
    investigate an element as well as component fixture.
    e.g - 

    it('should have <p> with Sujit Kumar Verma',()=>{
        const bannerDe:debugElement = fixture.debugElement;
        const bannerE1:HTMLElement = bannerDe.nativeElement;
        const p = bannerE1.querySelector('p');
        expect(p.textContent).toEqual('Sujit Kumar Verma');
    })

    it('should have <p> with Sujit Kumar Verma',()=>{
        const bannerDe:debugElement = fixture.debugElement;
        const paragraphDe = bannerDe.query(By.css('p'));
        const p:HTMLElement = paragraphDe.nativeElement;
        expect(p.textContent).toEqual('Sujit Kumar Verma');
    })


    Why we debugElement property on fixture instead of nativeElement for accessing template elements?
->  The Properties of the nativeElement depend upon the runntime enviroment.It might be 
    possible we could be runnig our application tests in a non browser platform that doesn't 
    have a DOM or whose DOM emulation does not support the full HTMLElement API.
    so In this It might create problem for us, so we can go for debugElement.       
     
    Angular relies on the debugElement abstraction to work safely across all supported platforms.
    Instead of creating an HTMLElement tree, Angular creates a debugElement tree that wraps 
    the native elements for the runntime platform.

    
    Note - 
    1. By.css() static method selects debugElement nodes with a standard css selector.
    2. InOrder to remove console errors we can add schemas property in the TestBed.confugureTestingModule
       passed argument object with value [NO_ERRORS_SCHEMA]

       e.g - TestBed.configureTestingModule({declarations:[ComponentName],schemas:[NO_ERRORS_SCHEMA]})
    
    3. fail() - Using this method we can fail a Testcase.
    4. pending() - Using this method we can make a Testcase in a Pending state.  

       