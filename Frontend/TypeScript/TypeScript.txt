1. What do you mean by Typescript ?
-> TypeScript is a JavaScript with Strongly Typed. 

2. What do you mean by Tuples in Typescript ?
-> Tuple is a heterogenous collection of elements of different data types.
   let arr = ["Sujit",1,true,"Verma"]

3. What do you mean by Array in Typescript?
-> Array is a homogenous collection of elements of similar data types.
   arr[]:number[] = [10,20,30,40]

4. What do you mean by Unions is Typescript?
-> Union we use to define a variable which can accept value of more than one datatypes.
   let value: number| string;
   value = 120

5. What do you mean by interface in Typescript?
-> Interface is used to define the structure of an object, specifying what properties it should have and 
   their types. 
  
6. What do you mean by enums?
-> Enums we use it to declare named constants in Typescript.

 7. What do you mean by types in typescript ?
->  Type is used to define the structure of any type.
    Types in TypeScript are not limited to objects. they can represent any kind of data, including 
    primitive types, tuples, arrays, functions, and more. Additionally, types can be combined using 
    union types (|), intersection types (&). 

 8. Difference between interface and type in Typescript ?
->                   Type                     |                    Interface

   1. Type is used to define structure of        1. Interface is used to defines structure of an object.
      any types including primitives, array, 
      tuples, union and intersection, 
      functions etc. 

   2. Type does not support extending other      2. Interface support extending other interface.
      Type.   

   3. Types can be used to create union          3. Interfaces does not support union and
      types and intersection types.                 intersection directly.

   Note - 
   Intersection of types means resultant type should have all properties type
   Union of types means resultant type can have any one of the properties type   

   What do you mean by partials in Typescript ?
-> Partial<T> is a utility type that allows you to create a new type by making all properties of an 
   existing type T optional.  

   What do you mean by Omit in Typescript ?
-> Omit<T, K> is a utility type that creates a new type by omitting specific properties K from an 
   existing type T. It allows you to create a new type that includes all properties from the original 
   type except for the ones specified to be omitted.
  
   What do you mean by Generics in Typescript ?
-> Generics in TypeScript provide a way to create reusable components and functions that can work with 
   a variety of data types while maintaining type safety.  

   What do you mean by decorator in Typescript ?
-> decorators provide a way to add metadata and modify the behavior of classes, methods, accessors, 
   properties, or parameters at design time.   

   // Decorator factory function
   function log(target: any, key: string, descriptor: PropertyDescriptor) {
      const originalMethod = descriptor.value;

      descriptor.value = function (...args: any[]) {
      console.log(`Calling ${key} with arguments: ${JSON.stringify(args)}`);
      return originalMethod.apply(this, args);
   };

   return descriptor;
   }

   class MyClass {
     @log
     greet(name: string) {
       return `Hello, ${name}!`;
     }
   }

   const obj = new MyClass();
   obj.greet('John');


   Note - 
   TypeScript Notes - https://www.typescripttutorial.net/
   
