                                   Advanced Javascript Concepts 
                        ------------------------------------------------------

    What do you mean by Execution Context in JavaScipt ?
->  Execution Context is the Enviroment created by JS to execute Javascript Code.      

    How does JavaScipt Program executes ?
->  When Javascript Program starts a global execution Context is created and moved to the Callstack and 
    it will poped out after whole synchronous javsScript code will get executed.

    while execution whenever It encounter asynchronus code (e.g  a callback with setTimeout) then that 
    Callback function goes to Web API of the browser and get the callback register there and wait for 
    specified Millisecond time , when it completes, it goes to the Callback Queue and waits 
    Until Whole Javascript code will get executed and Callstack to be empty or for callstack to be empty then 
    it is moved to the Callstack for the Execution.

    while execution whenever It encounters asynchronous code (e.g Promise based code ) then It register 
    that callback function in the Web API of the browser and move it to the Microtask Queue and waits Until 
    Whole Javascript code will get executed or callstack to be empty then it is moved to the callstack for the 
    Execution.
    Microtask Queue has higher Priorty than Callback Queue.
                    
    What do you mean by Eventloop in JavaScript ?
->  Event loop is a mechanism which continuously monitors the call stack, callback queue and microtask queue. 
    When the call stack is empty (meaning there's no more synchronous code to execute), the event loop checks if 
    there are any callbacks waiting in the callback queue or microtask queue for execution.

    The event loop is the secret behind JavaScriptâ€™s asynchronous programming. JS executes all 
    operations on a single thread, but using a few smart data structures, it gives us the illusion
    of multi-threading.

    What do you mean by Call Stack ?
->  Call stack is a mechanism used to keep track of function calls during the execution of a script. It's 
    a data structure that operates on a last-in, first-out (LIFO) basis.
    A Call Stack is a way for the Javascript Engine to keep track of its place in the code,

    What do you mean by Event Queue ?
->  Event Queue is a Queue where events and their associated callbacks are stored.
    can include various types of events, such as DOM events (e.g., click, keypress), timer events (e.g., 
    setTimeout, setInterval), and asynchronous I/O events (e.g., network requests). When an event occurs, 
    its associated callback is added to the event queue.

    What do you mean by callback Queue or Marco Task Queue ?
->  The callback queue (also known as the task queue or message queue) is a data structure that holds 
    callback functions waiting to be executed. It follows first in and first out order.

    Callback Queue start getting executed only after We have reached the end of the program or
    There are no statements left to be executed in the call stack.
    The Callback Queue waits until the call stack is empty. Afterwards, the codes in it are 
    executed in First In, First Out (FIFO) order. 

    What do you mean by Micro Task Queue in JavaScript ?
->  Microtask Queue is a Queue which is mostly used for Promise Jobs.
    Microtask Queue follows first-in-first-out Approach.
    
    Execution of a Micro Task is initiated only when nothing else is left in the Call Stack.   
    Micro Task Queue get higher Priorty over Callback Queue, once Micro Task Queue is empty then only 
    Callback Queue is executed.

   What do you mean by async and defer Attribute in Script Tag ?
-> When load a Webpage Two major things are Happening there 
   1. HTML Parsing 
   2. Loading of the Scripts
   
   Here Loading of the Scripts is also consisting of two Parts -
   1. Loading of the Scripts from the Server
   2. Execution of the Scripts Line by Line

   async - With async keyword while HTML document Parsing when Scripts are needed they get downloaded
   an scripts Execution starts, during that time Interval HTML document Parsing is blocked and once scripts 
   execution is completed then the HTML document parsing continues.
   The async attribute is a boolean attribute
   
   defer -  With defer keyword while HTML document Parsing Scripts get downloaded in parallel
   and when Scripts are needed there Execution starts, During that time Interval the HTML document
   parsing is blocked, once Scripts Execution is completed then HTML document Parsing continues.
   The defer attribute is a boolean attribute.

    What do you mean by setPrototypeOf method of JavaScript ?
->  The Object.setPrototypeOf() method sets the prototype of one object to another object.    

    e.g - Object.setPrototypeOf(obj1, obj2)

    obj1 - 
    The object whose prototype we have to use.

    obj2 - 
    The object whose prototype we have to set.  

    What do you mean by Events in JavaScript ?
->  Anything that happens to the HTML Page are events.

    What are the Different Phases of Events in JavaScript ?
->  There are three phases of Events in JavaScript
    1. Capturing Phase / Event Trickling
    2. Target Phase
    3. Bubbling Phase

    Capturing Phase is the Phase when the event goes down to the target element from the root element.
    Target Phase is the Phase when the Event reaches the target element.
    Bubbling Phase is the Phase when the Event Bubbles up from the target element.

   Explain how Event Bubbling and Event Capturing works in JavaScript ?   
-> Event Capturing (or Capture Phase) - 
   -------------------------------------
   1. In the event capturing phase, the event traverses the DOM from the root to the target element to 
      determine if any ancestor elements have event handlers for the event. 
   2. During this phase, the event starts from the outermost ancestor element and moves inward toward
      the target element.     
   3. Event handlers attached to ancestor elements are triggered first before the event reaches the
      target element.   
   4. Event capturing is rarely used in practice and is mostly used for advanced event handling scenarios.

   Event Bubbling (or Bubbling Phase) -
   ---------------------------------------
   1. In the event bubbling phase, after the event reaches the target element and triggers its event handlers, 
      the event then bubbles up through the ancestor elements of the target.
   2. During this phase, the event moves from the target element to its parent elements, then to their parent 
      elements, and so on, until it reaches the root of the document (or the top-level window object).
   3. Event handlers attached to the target element and its ancestor elements are triggered in reverse order 
      of their attachment, starting from the target element and moving outward toward the root of the document.
   4. Event bubbling is the default behavior for most DOM events in JavaScript and is commonly used in event 
      handling.

    What do you mean by Super and this keyword in JavaScript ?
->  super Keyword -
    -------------------
    super keyword is used to access parent class constructor, method, variable in child class.

    this Keyword -
    -------------------
    this keyword is used to refer current context and object.

    If you are asked to go through the DOM tree containing DIVs and log the levels (0,1,2,..) of those divs, how 
    would you approach implementing this ?
->  function logDivLevels(element, level = 0) {
    // Check if the element is a DIV
    if (element.tagName === 'DIV') {
      // Log the level of the DIV
      console.log(`Level ${level}: ${element.textContent.trim()}`);
    }

    // Recursively traverse child nodes
    for (let i = 0; i < element.children.length; i++) {
      logDivLevels(element.children[i], level + 1);
     }
    }

    // Example usage: Log DIV levels starting from the document body
    logDivLevels(document.body);

    What do you mean by Event Propagation ?
->  Event propagation is a mechanism that defines how events propagate or travel through the DOM tree to 
    reach the target element.   

    What do you mean by Event Delegation ? 
->  Event delegation refers to the Process of handling events in our application in a more optimal way.

    Event Delegation is possible just because of Event bubbling.
    So Whenever user click on child element button then events bubbles up from 
    the child element to the parent element.

    So Intead of adding an event listener to each and every similar element, we can add 
    an event listener to a parent element and call an event on a particular target 
    using the .target property of the event object. 

    Now there is a single event listener and a single responding function. In the 
    above-shown method, we have improved the performance, but we have lost access
    to individual <li> elements so to resolve this issue, we will use a technique
    called event delegation. 

    The event object has a special property call .target which will help us in 
    getting access to individual <li> elements with the help of phases.

    <ul> element is clicked.
    The event goes in the capturing phase.
    It reaches the target (<li> in our case).
    It switches to the bubbling phase.
    When it hits the <ul> element, it runs the event listener.
    Inside the listener function event.target is the element that was clicked.
    Event.target provides us access to the <li> element that was clicked.

    The .nodeName property of the .target allows us to identify a specific node. 
    If our parent element contains more than one child element then we can identify
    specific elements by using the .nodeName property.

   What do you mean by IndexedDB ?
-> IndexedDB is a transactional database System in our Web browsers.
   It is a Builtin DB in our web browser

    How does IndexDB works ?
    IndexDB has something like Object Store (Like a Table and a Collection Storing data in the key
    value pairs)    
    It is a client side database and here the data is stored in the client browser.
 
    Advantages of Using IndexDB Database 
    ------------------------------------

    1. It can store a significat amount of data.
    2. It is very fast because It performs reads using indexes.
    3. It stores any kind of data by key and value pairs.
    4. Here Every Operation is a Transaction so more reliability.
    5. It also Works with offline apps.
    6. It also works well with web workers.
    7. Less UI blockage.

    Difference between IndexDB and LocalStorage 
                        IndexDB                     |                    LocalStorage 

      1. Stores Any kind of Data in key value           1. Stores String data only.
         pairs.                  

      2. Full Web Workers support.                      2. No Web Workers support. 
      3. Complex API                                    3. Simpler API 
      4. Asynchronous API                               4. Synchronous API
      5  It can store upto 2 GB data.                   5. It can store 2MB to 10MB data.
      6  It uses indexing concept for                   6. It do not uses Indexing concept. 
         accessing data.      

   What do you shadow DOM in Javascript ?
-> Shadow DOMs are the hidden DOMs that are attached to the elements of the regular DOM.

   Why we need Shadow DOM in JavaScipt ?
-> When we want to encapsulate some HTML element from not getting affected with regular DOM elements 
   behaviour then we need Shadow DOM element.

   What do you mean by WebSockets in JavaScript ?
-> WebSocket is a communication protocol that provides full-duplex communication channels over a single TCP 
   connection. It allows for real-time, bidirectional communication between clients and servers.   

   Why we need WebSockets ?
-> WebSockets were invented by developers to effectively facilitate real-time results. This reduces unnecessary 
   network traffic, as data can immediately travel both ways through a single open connection.    

   What do you mean by webWorkers ?
-> Web Workers is a feature in JavaScript that allows developers to run scripts in background threads 
   apart from the main thread of the web page. This enables concurrent execution of scripts, improving 
   performance and responsiveness. 

   How does Browser Rendering work? Explain the Critical Rendering Path.
-> Browser rendering involves the process of converting HTML, CSS, and JavaScript into a visual representation 
   that users can interact with on their screens. 
   Browser rendering works on the concept of critical rendering path.

   Here's an overview of the critical rendering path:

   1. HTML Parsing: The browser parses the HTML document to create the Document Object Model (DOM) tree. It 
      parses the HTML from top to bottom, constructing the structure of the page.

   2. CSS Parsing and Styling: As the HTML is parsed, the browser encounters CSS references. It then begins to 
      fetch and parse the CSS files, constructing the CSS Object Model (CSSOM). The CSSOM represents the styles 
      applied to the elements in the DOM. The browser then combines the DOM and CSSOM to create the Render 
      Tree, which contains only the nodes needed to render the visible part of the page. 
      Note - CSS is rendering blocking resource.
             JavaScipt is parser blocking resource.

   3. Layout (Reflow): Once the Render Tree is constructed, the browser calculates the layout of each node. This
      process is known as reflow. It determines the exact position and size of each element on the screen based 
      on the CSS styles applied to them.    

   4. Painting: After layout calculations are done, the browser paints the pixels on the screen according to the 
      Render Tree and layout information. This process involves converting each node in the Render Tree into 
      actual pixels on the screen.    

   5. Compositing: If there are multiple layers due to overlapping elements, the browser composites these layers
      to create the final visual output. Compositing involves blending the pixels of different layers to produce
      the final image that the user sees. 

   The Critical Rendering Path (CRP) refers to the sequence of steps the browser takes to render a web page on 
   the user's screen     

   How we can optimize Critical Rendering Path ?
-> Several techniques to optimize the critical rendering path:    

   1. Minimize Render-Blocking Resources: -
      CSS: Minimize the amount of CSS needed to render the initial view of the page. Use techniques like inline 
      critical CSS or asynchronous loading of non-critical CSS.
      JavaScript: Minimize and defer JavaScript execution, especially for scripts that are not needed for 
      initial page rendering. Use async or defer attributes for external script tags. Consider lazy loading or 
      code-splitting for large JavaScript files.
      Fonts: Optimize font loading by using font-display property to control font rendering behavior and 
      preloading fonts using the preload directive.

   2. Reduce Server Response Time: -
      Optimize server response time by minimizing network latency, using CDN (Content Delivery Network) to serve
      resources from geographically closer servers, and optimizing backend code and database queries. 

   3. Lazy Loading: -
      Implement lazy loading for images, videos, and other non-critical resources that are below the fold or 
      outside the viewport initially. Lazy loading defers the loading of these resources until they are needed, 
      reducing the initial page load time.    

   4. Browser Caching and Compression: -
      Leverage browser caching by setting appropriate cache-control headers for static resources. Utilize 
      techniques like gzip or Brotli compression to reduce the size of transmitted data and speed up resource 
      loading.  

   5. Optimize Images: -
      Compress and optimize images to reduce their file size without sacrificing quality. Use modern image 
      formats like WebP, JPEG 2000, or AVIF for better compression and performance.   

   What is repaint and reflow ? What is application profilling ? 
-> Reflow  
   ---------
   Reflow refers to the process of calculating the layout of elements on a web page. It happens when changes are 
   made to the DOM that affect the geometry of elements, such as adding, removing, or changing the size or 
   position of elements.
   When a reflow occurs, the browser recalculates the dimensions and positions of all affected elements in the 
   Render Tree, as well as their relationships to each other. This process can be computationally expensive and 
   can lead to performance issues if not managed properly.  

   Repaint 
   ----------
   Repaint refers to the process of updating the visual appearance of elements on a web page without changing 
   their layout. It occurs when changes are made to properties that affect only the visual appearance of elements
   , such as color, background, or visibility.
   Unlike reflow, repaint does not involve recalculating the layout of elements. Instead, it updates the pixels 
   on the screen to reflect the changes in visual appearance.   

   Application Profiling
   ------------------------
   Application profiling is the process of analyzing and measuring the performance of a software application to 
   identify bottlenecks, resource usage patterns, and areas for optimization. In the context of web development,
   application profiling involves using various tools and techniques to monitor the performance of web 
   applications, including page load times, network requests, CPU usage, memory consumption, and rendering 
   performance.

   Profiling tools provide developers with insights into how their web applications are performing in real-world
   scenarios and help them identify performance issues that may affect user experience. 


   

    
