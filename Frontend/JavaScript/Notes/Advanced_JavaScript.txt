                                   Advanced Javascript Concepts 
                        ------------------------------------------------------

    What do you mean by Execution Context in JavaScipt ?
->  Execution Context is the Enviroment created by JS to execute Javascript Code.      

    How does JavaScipt Program executes ?
->  When Javascript Program starts a global execution Context is created and moved to the Callstack and 
    it will poped out after whole synchronous javsScript code will get executed.

    while execution whenever It encounter asynchronus code (e.g  a callback with setTimeout) then that 
    Callback function goes to Web API of the browser and get the callback register there and wait for 
    specified Millisecond time , when it completes, it goes to the Callback Queue and waits 
    Until Whole Javascript code will get executed and Callstack to be empty then it is moved to the 
    Callstack for the Execution.

    while execution whenever It encounters asynchronous code (e.g Promise based code ) then It register 
    that callback function in the Web API of the browser and wait for specified Millisecond time ,
    when it completes, moved to the Microtask Queue and waits Until Whole Javascript code will get 
    executed and Callstack to be empty then it is moved to the Callstack for the Execution.
    Microtask Queue has higher Priorty than Callback Queue.
                    
    What do you mean by Eventloop in JavaScript ?
->  Event loop is a mechanism which continuously monitors the call stack and the callback queue. When the 
    call stack is empty (meaning there's no more synchronous code to execute), the event loop checks if 
    there are any callbacks waiting in the callback queue for execution.

    The event loop is the secret behind JavaScript’s asynchronous programming. JS executes all 
    operations on a single thread, but using a few smart data structures, it gives us the illusion
    of multi-threading.

    What do you mean by Call Stack ?
->  Call stack is a mechanism used to keep track of function calls during the execution of a script. It's 
    a data structure that operates on a last-in, first-out (LIFO) basis.
    
    A Call Stack is a way for the Javascript Engine to keep track of its place in the code,
    It also stores additional information like Whenever we execute Nested functions 
    multiple functions are called. It has the information which function is currently runnimg 
    and also what functions are invoked from that function.

    What do you mean by Event Queue ?
->  Event Queue is a Queue which is responsible for keeping track of Synchronus Functions 
    and Operations.It sends Synchronus Functions and Operations to the Call Stack 
    for Execution.
    It follows the Queue Data Structure to maintain the correct sequence in which all Operations
    should be sent for execution as they are being Called.   

    What do you mean by callback Queue ?
->  The callback queue (also known as the task queue or message queue) is a data structure that holds 
    callback functions waiting to be executed. It's closely related to the event loop mechanism and is 
    used to manage asynchronous operations.
    Callback Queue start getting executed only after We have reached the end of the program or
    There are no statements left to be executed in the call stack.

    The Callback Queue waits until the call stack is empty. Afterwards, the codes in it are 
    executed in First In, First Out (FIFO) order. As more functions or codes are added to the
    callback queue, they stay at the back and wait for the ones in the front to leave the queue first.

    What do you mean by Microtask Queue in JavaScript ?
->  Microtask Queue is a Queue which is mostly used for Promise Jobs.
    Microtask Queue follows first-in-first-out Approach.
    
    Execution of a Microtask task is initiated only when nothing else is left in the Call Stack.   
    Microtask Queue get higher Priorty over Callback Queue, once Microtask Queue is empty then only 
    Callback Queue is executed.

   What do you mean by async and defer Attribute in Script Tag ?
-> When load a Webpage Two major things are Happening there 
   1. HTML Parsing 
   2. Loading of the Scripts
   
   Here Loading of the Scripts is also consisting of two Parts -
   1. Loading of the Scripts from the Server
   2. Execution of the Scripts Line by Line

   async - With async keyword while HTML document Parsing when Scripts are needed they get downloaded
   an scripts Execution starts, during that time Interval HTML document Parsing is blocked and once scripts 
   execution is completed then the HTML document parsing continues.
   The async attribute is a boolean attribute
   
   defer -  With defer keyword while HTML document Parsing Scripts get downloaded in parallel
   and when Scripts are needed there Execution starts, During that time Interval the HTML document
   parsing is blocked, once Scripts Execution is completed then HTML document Parsing continues.
   The defer attribute is a boolean attribute.

    What do you mean by Functional Programming ?
->  Functional Programming is the Programming language which Majorly deals with the functions.  

    What do you mean by setPrototypeOf method of JavaScript ?
->  The Object.setPrototypeOf() method sets the prototype of one object to another object.    

    e.g - Object.setPrototypeOf(obj1, obj2)

    obj1 - 
    The object whose prototype we have to use.

    obj2 - 
    The object whose prototype we have to set.  

    What do you mean by Events in JavaScript ?
->  Anything that happens to the HTML Page are events.

    What are the Different Phases of Events in JavaScript ?
->  There are three phases of Events in JavaScript
    1. Capturing Phase / Event Trickling
    2. Target Phase
    3. Bubbling Phase

    Capturing Phase is the Phase when the event goes down to the target element.
    Target Phase is the Phase when the Event reaches the target element.
    Bubbling Phase is the Phase when the Event Bubbles up from the target element.


    <html>
    <body>
    <div class="container">
        <button id="btn">Click Me!</button>
    </div>
      
    <script type="text/javascript">
        document.getElementById('btn')
            .addEventListener('click', 
            function () {
                alert('Button Clicked!');
            })
    </script>
    </body>
    </html>


    OUTPUT - Alert with message Button Clicked

         (Event Capturing)   Document                 
            Phase 1          HTML   
                             Body 
                             div                  
                             Button               (Event Target ) Phase 2 & (Event bubbling) Phase 3 
                       


    The addEventListener() method will be called during the Bubbling phase. The code
    shown above will use addEventListener() with two arguments. However, in the above
    code, .addEventListener() can be called with the third argument capture as “true” which 
    will invoke the listener earlier during the capturing phase.


    <DOCTYPE html>
	<html>

	<body id="bdy">
		<div id="container">
			<button id="btn">Click Me!</button>
		</div>
		<script type="text/javascript">
			document.getElementById('bdy')
				.addEventListener('click', function () {
				alert('Body!');
			})
			document.getElementById('container')
				.addEventListener('click', function () {
				alert('Div!');
			}, true)
			document.getElementById('btn')
				.addEventListener('click', function () {
				alert('Button!');
			})
		</script>
	</body>

	</html>


    OUTPUT - 1. Alert with message Div  2. Alert with message Button   3. Alert with message Body


    In the above code, the body and button are in the bubbling phase (default) while div is set to 
    capturing phase. When a button is clicked it starts at the top again. When it comes to the body 
    element, it does not run function because we are still in the capturing phase. But when it reaches 
    div it runs the function because the third parameter of addEventListener() is “true”. So it has to 
    run in the capturing phase. When it reaches the button it switches from the capturing phase to the 
    target phase and lastly to the bubbling phase. It fires the addEventListener which is in default mode.

    What do you mean by Event Propagation ?
->  Event propagation is a mechanism that defines how events propagate or travel through the DOM tree to 
    reach the target element.   

    What do you mean by Event Delegation ? 
->  Event delegation refers to the Process of handling events in our application in a more optimal way.

    Event Delegation is possible just because of Event bubbling.
    So Whenever user click on child element button then events bubbles up from 
    the child element to the parent element.

    So Intead of adding an event listener to each and every similar element, we can add 
    an event listener to a parent element and call an event on a particular target 
    using the .target property of the event object. 

    Now there is a single event listener and a single responding function. In the 
    above-shown method, we have improved the performance, but we have lost access
    to individual <li> elements so to resolve this issue, we will use a technique
    called event delegation. 

    The event object has a special property call .target which will help us in 
    getting access to individual <li> elements with the help of phases.

    <ul> element is clicked.
    The event goes in the capturing phase.
    It reaches the target (<li> in our case).
    It switches to the bubbling phase.
    When it hits the <ul> element, it runs the event listener.
    Inside the listener function event.target is the element that was clicked.
    Event.target provides us access to the <li> element that was clicked.

    The .nodeName property of the .target allows us to identify a specific node. 
    If our parent element contains more than one child element then we can identify
    specific elements by using the .nodeName property.
  
    const customUI = document.createElement('ul');

    function responding(evt) {
    if (evt.target.nodeName === 'li')
        console.log('Responding')
    }

    for (var i = 1; i <= 10; i++) {
    const newElement = document.createElement('li');
    newElement.textContent = "This is line " + i;
    customUI.appendChild(newElement);
    }

    customUI.addEventListener('click', responding);


   What do you mean by IndexedDB ?
-> IndexedDB is a transactional database System in our Web browsers.
   It is a Builtin DB in our web browser

    How does IndexDB works ?
    IndexDB has something like Object Store (Like a Table and a Collection Storing data in the key
    value pairs)    
    It is a client side database and here the data is stored in the client browser.
 
    Advantages of Using IndexDB Database 
    ------------------------------------

    1. It can store a significat amount of data.
    2. It is very fast because It performs reads using indexes.
    3. It stores any kind of data by key and value pairs.
    4. Here Every Operation is a Transaction so more reliability.
    5. It also Works with offline apps.
    6. It also works well with web workers.
    7. Less UI blockage.

    Difference between IndexDB and LocalStorage 
                        IndexDB                     |                    LocalStorage 

      1. Stores Any kind of Data in key value           1. Stores String data only.
         pairs.                  

      2. Full Web Workers support.                      2. No Web Workers support. 
      3. Complex API                                    3. Simpler API 
      4. Asynchronous API                               4. Synchronous API
      5  It can store upto 2 GB data.                   5. It can store 2MB to 10MB data.
      6  It uses indexing concept for                   6. It do not uses Indexing concept. 
         accessing data.      

      
       Working with IndexDB
       -----------------------
       Uers Writes  ->  IndexDB   -> Server 

       IndexedDB have some Limitations also It can cause UI Blockage becuase it uses Structured 
       Clone Alogrithm.          
        
        Sends Objects to IndexDB   ---------->    Clone   ------------->  Data Stored
                                   Main Thread

        Larger the size of Object more will be chances of UI Blockage 


        We can Prevent IndexDB causing UI Blockage using two ways 
        1. Skiping Sending Larger size of data to IndexDB.
        2. Skiping Structured Clone Alogrithm by sending data in buffer format.

   What do you shadow DOM in Javascript ?
-> Shadow DOMs are the hidden DOMs that are attached to the elements of the regular DOM.

   Why we need Shadow DOM in JavaScipt ?
-> When we want to encapsulate some HTML element from not getting affected with regular DOM elements 
   behaviour then we need Shadow DOM element.

   What do you mean by WebSockets in JavaScript ?
-> The WebSocket API is an advanced technology that makes it possible to open a two-way interactive 
   communication session between the user's browser and a server.

   Why we need WebSockets ?
-> WebSockets were invented by developers to effectively facilitate real-time results. WebSockets work by 
   initiating continuous, full-duplex communication between a client and server. This reduces unnecessary 
   network traffic, as data can immediately travel both ways through a single open connection.    

   What do you mean by webWorkers ?
-> Web Workers is a feature in JavaScript that allows developers to run scripts in background threads 
   apart from the main thread of the web page. This enables concurrent execution of scripts, improving 
   performance and responsiveness. 


   

    
