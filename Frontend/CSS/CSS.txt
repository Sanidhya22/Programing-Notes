1. What are the Different Types of Selector we have in CSS ?
-> 1. Simple Selector - Select ELements based on name,id and class.
   2. Combinator Selector - Select ELements based on Specific Relationship between them.
   3. Pseudo-class Selector - Select ELements based on Certain States of an HTML element.
   4. Pseudo-element Selector- Pseudo-element Selector is used to Select Specifc part
      of an HTML element.
   5. Attribute Selector - Selects ELements based on an Specific Attribute or Attribute value.


 2. What are the Different Positions we have in CSS ?
 -> The Position Propery Specifies the type of Positioning Method used for an Element.
    The Different Types Of Positions are 
    1. Static - Static Postion is the default Position in a Web Page.An ELement with Static
       Position is placed According to the flow of the Page.
    2. Relative - An ELement with Position Relative is Positioned Relative to its normal 
       Position.
    3. Fixed - An Element with Position Fixed is Positioned Fixed with the Viewport which 
       means it remains in its Position Fixed.
    4. Absoulte -  An ELement with Position Absoulte is placed Relative to its nearest
       Ancestor.
    5. Sticky - An ELement with Position Sticky is placed based on the users Scroll 
       Position. Sticky ELement Toogles between relative and Fixed.

3.  What are the Different types of Combinator Selectors ?
->  There are four Types of Combinator Selector
    1. Descendent Selector(Space) - The descendant selector matches all elements that are 
       descendants of a specified element.
    2. Child Selector(>) - The child selector selects all elements that are the children of 
       a specified element.
    3. Adjacent Sibling Selector(+) - The adjacent sibling selector is used to select an element 
       that is directly after specified element.
    4. General Sibling Selector(~) - The general sibling selector selects all elements that 
       are next siblings of a specified element.

4. What do you mean by Media Queries ?
-> Media Queries is a Concept/Technique in CSS for Creating Responsive Web Designs.    
   e.g: @media only screen and (max-width: 600px) {
          body {
            background-color: lightblue;
         }
       }


5. What do you mean by Flexbox in CSS ?
-> FlexBox in CSS is a Flex Container that treat all the elements inside the box as flex 
   Elements or inline Elements. 

6. What is the Difference between CSS Grid and CSS Flexbox ?
->                 CSS Grid           |                    CSS FlexBox

   1. Two Dimentional                        1. One Dimentional

7  Which is better CSS Grid or CSS Flexbox ?
-> CSS Flexbox is better than CSS Grid for Normal Design Layout and CSS Grid is Better 
   than CSS FlexBox for Complex Design Layouts.
    

8. What do you mean by Cascading in CSS ?
-> Cascading is Rules based Priorty and Hierarchy in Applying Styles.
    Priorties of Styling in CSS - 
      
    Note --
    If we Provide Multiple Styles to the same element in the same Scope then Last Style will 
    get Implemented.
    Styling Proprioties
    -------------------------------------------------------------
    Inline Style > Internal Style > External CSS

    Parent Style Properties values. >  Default Style Properties Values of the Browser in
    Which it is Openned.

    Id > Class > Generic Selector

    !Important Keyword has the Heightest Proiorty Over other Elements.

9.  What do you mean by Specificity in CSS ?
->  If there are two or more CSS rules that point to the same element, the selector with the
    highest specificity value will get Applied to the ELement.
    There is a Specificity value Calculator that Calculates the Specificity Value.
    Think of specificity as a score/rank that determines which style declaration is ultimately applied 
    to an element.

10. What do you mean by Inheritence in CSS ?
->  CSS Inheritence is the Process Where Child HTML ELement Inherites CSS Properties value 
    from the Parent HTML ELements.  

    There are Three Main Properties of Inheritence in CSS -
    1.Inherit - In Case of Inherit the Elements will Inherit Properties from the Parent to
    the Child ELement.
    2.Intial - In Case of Intial Elements Will get Intialized with the default Value as Per 
    Default Value Provided by the Browser.
    3.Unset - In This Case ELement Properties will Reset to its Natural Values as Per as 
    Provided by the CSS rules, It may be Inherit Parent Property Value or Intial Value.

11. How does Semantics Tags help both Developer and the Browser ?     
->  Semantics Tags describes its Meaning to the Developer So that He Can Know Meaning of the Tag 
    and Where it Should go and what Should be placed In.

12. What are the different CSS units we have in CSS ?
->  The Different CSS units we have in CSS -
    There are are two different types of CSS units we have -
    1. Absoulte Length Units  
      1. px (Pixel)
      2. cm (Centimeter)
      3. mm (Millimeter)
      4. in (Inches)
      5. pt (Points)

    2.Reactive Unit lengths 
      1. 1vh (view height) 1 % of the height of the viewport.
      2. 1vw (view width)  1 % of the width of the viewport.
      3. % (present) percent relative to the viewport.


13. What do you mean by LESS and why we use it ?
->  LESS stands for Leaner Style Sheets.
    LESS is a CSS pre-processor.
    LESS reduces repeation of CSS and therefore saves time.  
    It allows us to use features like variables, nesting, mixins, etc, all in a CSS-compatible syntax.                                                  

14. What do you mean by SASS and why we use it ?
->  SASS stands for Syntactically Awesome StyleSheet.
    SASS is a CSS pre-processor.
    SASS reduces repeation of CSS and therefore saves time.   

    Note --

    1. SASS is Platform independent.
    2. In SASS Variables are a way to store information that you can re-use later.  
    3. Sass uses the $ symbol to declare a variable.
    e.g - 
       we use @import "filename" to import a Sass file without specifying .sass.
    
    4. @extends directive lets us share a set of CSS properties from one selector to another.
       e.g - 
       .button-basic  {
        border: none;
        padding: 15px 30px;
        text-align: center;
        font-size: 16px;
        cursor: pointer;
        }

       .button-report  {
       @extend .button-basic;
       background-color: red;
       }

    5. The @mixin directive lets you create CSS code that is to be reused throughout the website.
       e.g - 
           @mixin important-text {
           color: red;
           font-size: 25px;
           font-weight: bold;
           border: 1px solid blue;
           }

     6. The @include directive is used to use the mixin.
        e.g - 
           @mixin important-text {
            color: red;
            font-size: 25px;
            font-weight: bold;
            border: 1px solid blue;
          }
         .danger {
            @include important-text;
            background-color: green;
          }
15. What is better among SASS and LESS ?
->  Less is better than Sass because LESS has an advantage in functions where users can activate mixins when 
    certain conditions occur which Sass does not.     

16. What do you mean by System font ?
->  A system font or web-safe font is one that's already assumed to be present on the vast majority of users' 
    devices, with no need for a web font to be downloaded.    

    What do you mean by @font-face ?
->  font-face is a CSS rule which allows you to show a font on a Web page even if that font is not installed 
    on the users' computer.

17. What do you mean by PostCSS ?
->  PostCSS is a JavaScript tool that transforms your CSS code into an abstract syntax tree (AST) and then 
    provides an API (application programming interface) for analyzing and modifying it using JavaScript 
    plugins.
    PostCSS we can use as in  Conjuction with existing presprocessors like SASS, LESS or we can use 
    it as an alternative to all of them. 

18. Why we need before and after as pseudo elements instead of adding elements normally before 
    and after the elements.
->  CSS ::before and ::after pseudo-elements allow you to insert “content” before and after any non-replaced 
    element (e.g. they work on a <div> but not an <input>). This effectively allows you to show something on 
    a web page that might not be present in the HTML content. You shouldn’t use it for actual content 
    because it’s not very accessible in that you can’t even select and copy text inserted on the page.
    it’s just decorative content which might not be the case with the normal way of inserting elements
    elements into the HTML Content.

